{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-virtual-scroll.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAA4I;;AAE5I;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C,cAAc,kBAAkB,WAAW,eAAe,yBAAyB,sBAAsB,qBAAqB,iBAAiB,oCAAoC,UAAU,iCAAiC,6BAA6B,iBAAiB,mBAAmB,kBAAkB,gCAAgC,wBAAwB,sBAAsB;;AAE5a;AACA;AACA,QAAQ,4DAAgB;AACxB,sBAAsB;AACthB,QAAQ,4DAAS;AACjB;AACA;AACA,eAAe,0BAA0B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,GAAG;AACzB,2BAA2B,iBAAiB;AAC5C,aAAa,EAAE,sBAAsB,4DAAC,gBAAgB,uBAAuB;AAC7E;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,uBAAuB,MAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,WAAW,uCAAuC,YAAY,sDAAsD,kBAAkB,6BAA6B,SAAS,QAAQ,GAAG,GAAG;AACvO,KAAK;AACL;AACA;;AAE+C","file":"76-es2015.js","sourcesContent":["import { r as registerInstance, f as readTask, w as writeTask, i as forceUpdate, h, H as Host, e as getElement } from './index-26ec602c.js';\r\n\r\nconst CELL_TYPE_ITEM = 'item';\r\nconst CELL_TYPE_HEADER = 'header';\r\nconst CELL_TYPE_FOOTER = 'footer';\r\nconst NODE_CHANGE_NONE = 0;\r\nconst NODE_CHANGE_POSITION = 1;\r\nconst NODE_CHANGE_CELL = 2;\r\n\r\nconst MIN_READS = 2;\r\nconst updateVDom = (dom, heightIndex, cells, range) => {\r\n    // reset dom\r\n    for (const node of dom) {\r\n        node.change = NODE_CHANGE_NONE;\r\n        node.d = true;\r\n    }\r\n    // try to match into exisiting dom\r\n    const toMutate = [];\r\n    const end = range.offset + range.length;\r\n    for (let i = range.offset; i < end; i++) {\r\n        const cell = cells[i];\r\n        const node = dom.find(n => n.d && n.cell === cell);\r\n        if (node) {\r\n            const top = heightIndex[i];\r\n            if (top !== node.top) {\r\n                node.top = top;\r\n                node.change = NODE_CHANGE_POSITION;\r\n            }\r\n            node.d = false;\r\n        }\r\n        else {\r\n            toMutate.push(cell);\r\n        }\r\n    }\r\n    // needs to append\r\n    const pool = dom.filter(n => n.d);\r\n    for (const cell of toMutate) {\r\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\r\n        const index = cell.i;\r\n        if (node) {\r\n            node.d = false;\r\n            node.change = NODE_CHANGE_CELL;\r\n            node.cell = cell;\r\n            node.top = heightIndex[index];\r\n        }\r\n        else {\r\n            dom.push({\r\n                d: false,\r\n                cell,\r\n                visible: true,\r\n                change: NODE_CHANGE_CELL,\r\n                top: heightIndex[index],\r\n            });\r\n        }\r\n    }\r\n    dom\r\n        .filter(n => n.d && n.top !== -9999)\r\n        .forEach(n => {\r\n        n.change = NODE_CHANGE_POSITION;\r\n        n.top = -9999;\r\n    });\r\n};\r\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\r\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\r\n    const childrenNu = children.length;\r\n    let child;\r\n    for (let i = 0; i < dom.length; i++) {\r\n        const node = dom[i];\r\n        const cell = node.cell;\r\n        // the cell change, the content must be updated\r\n        if (node.change === NODE_CHANGE_CELL) {\r\n            if (i < childrenNu) {\r\n                child = children[i];\r\n                nodeRender(child, cell, i);\r\n            }\r\n            else {\r\n                const newChild = createNode(el, cell.type);\r\n                child = nodeRender(newChild, cell, i) || newChild;\r\n                child.classList.add('virtual-item');\r\n                el.appendChild(child);\r\n            }\r\n            child['$ionCell'] = cell;\r\n        }\r\n        else {\r\n            child = children[i];\r\n        }\r\n        // only update position when it changes\r\n        if (node.change !== NODE_CHANGE_NONE) {\r\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\r\n        }\r\n        // update visibility\r\n        const visible = cell.visible;\r\n        if (node.visible !== visible) {\r\n            if (visible) {\r\n                child.classList.remove('virtual-loading');\r\n            }\r\n            else {\r\n                child.classList.add('virtual-loading');\r\n            }\r\n            node.visible = visible;\r\n        }\r\n        // dynamic height\r\n        if (cell.reads > 0) {\r\n            updateCellHeight(cell, child);\r\n            cell.reads--;\r\n        }\r\n    }\r\n};\r\nconst createNode = (el, type) => {\r\n    const template = getTemplate(el, type);\r\n    if (template && el.ownerDocument) {\r\n        return el.ownerDocument.importNode(template.content, true).children[0];\r\n    }\r\n    return null;\r\n};\r\nconst getTemplate = (el, type) => {\r\n    switch (type) {\r\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\r\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\r\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\r\n    }\r\n};\r\nconst getViewport = (scrollTop, vierportHeight, margin) => {\r\n    return {\r\n        top: Math.max(scrollTop - margin, 0),\r\n        bottom: scrollTop + vierportHeight + margin\r\n    };\r\n};\r\nconst getRange = (heightIndex, viewport, buffer) => {\r\n    const topPos = viewport.top;\r\n    const bottomPos = viewport.bottom;\r\n    // find top index\r\n    let i = 0;\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] > topPos) {\r\n            break;\r\n        }\r\n    }\r\n    const offset = Math.max(i - buffer - 1, 0);\r\n    // find bottom index\r\n    for (; i < heightIndex.length; i++) {\r\n        if (heightIndex[i] >= bottomPos) {\r\n            break;\r\n        }\r\n    }\r\n    const end = Math.min(i + buffer, heightIndex.length);\r\n    const length = end - offset;\r\n    return { offset, length };\r\n};\r\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\r\n    const end = range.offset + range.length;\r\n    return (dirtyIndex <= end ||\r\n        currentRange.offset !== range.offset ||\r\n        currentRange.length !== range.length);\r\n};\r\nconst findCellIndex = (cells, index) => {\r\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\r\n    if (index === 0) {\r\n        return 0;\r\n    }\r\n    else if (index === max + 1) {\r\n        return cells.length;\r\n    }\r\n    else {\r\n        return cells.findIndex(c => c.index === index);\r\n    }\r\n};\r\nconst inplaceUpdate = (dst, src, offset) => {\r\n    if (offset === 0 && src.length >= dst.length) {\r\n        return src;\r\n    }\r\n    for (let i = 0; i < src.length; i++) {\r\n        dst[i + offset] = src[i];\r\n    }\r\n    return dst;\r\n};\r\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\r\n    const cells = [];\r\n    const end = len + offset;\r\n    for (let i = offset; i < end; i++) {\r\n        const item = items[i];\r\n        if (headerFn) {\r\n            const value = headerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_HEADER,\r\n                    value,\r\n                    index: i,\r\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\r\n                    reads: headerHeight ? 0 : MIN_READS,\r\n                    visible: !!headerHeight,\r\n                });\r\n            }\r\n        }\r\n        cells.push({\r\n            i: j++,\r\n            type: CELL_TYPE_ITEM,\r\n            value: item,\r\n            index: i,\r\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\r\n            reads: itemHeight ? 0 : MIN_READS,\r\n            visible: !!itemHeight,\r\n        });\r\n        if (footerFn) {\r\n            const value = footerFn(item, i, items);\r\n            if (value != null) {\r\n                cells.push({\r\n                    i: j++,\r\n                    type: CELL_TYPE_FOOTER,\r\n                    value,\r\n                    index: i,\r\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\r\n                    reads: footerHeight ? 0 : MIN_READS,\r\n                    visible: !!footerHeight,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return cells;\r\n};\r\nconst calcHeightIndex = (buf, cells, index) => {\r\n    let acum = buf[index];\r\n    for (let i = index; i < buf.length; i++) {\r\n        buf[i] = acum;\r\n        acum += cells[i].height;\r\n    }\r\n    return acum;\r\n};\r\nconst resizeBuffer = (buf, len) => {\r\n    if (!buf) {\r\n        return new Uint32Array(len);\r\n    }\r\n    if (buf.length === len) {\r\n        return buf;\r\n    }\r\n    else if (len > buf.length) {\r\n        const newBuf = new Uint32Array(len);\r\n        newBuf.set(buf);\r\n        return newBuf;\r\n    }\r\n    else {\r\n        return buf.subarray(0, len);\r\n    }\r\n};\r\nconst positionForIndex = (index, cells, heightIndex) => {\r\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\r\n    if (cell) {\r\n        return heightIndex[cell.i];\r\n    }\r\n    return -1;\r\n};\r\n\r\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\r\n\r\nconst VirtualScroll = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.range = { offset: 0, length: 0 };\r\n        this.viewportHeight = 0;\r\n        this.cells = [];\r\n        this.virtualDom = [];\r\n        this.isEnabled = false;\r\n        this.viewportOffset = 0;\r\n        this.currentScrollTop = 0;\r\n        this.indexDirty = 0;\r\n        this.lastItemLen = 0;\r\n        this.totalHeight = 0;\r\n        /**\r\n         * It is important to provide this\r\n         * if virtual item height will be significantly larger than the default\r\n         * The approximate height of each virtual item template's cell.\r\n         * This dimension is used to help determine how many cells should\r\n         * be created when initialized, and to help calculate the height of\r\n         * the scrollable area. This height value can only use `px` units.\r\n         * Note that the actual rendered size of each cell comes from the\r\n         * app's CSS, whereas this approximation is used to help calculate\r\n         * initial dimensions before the item has been rendered.\r\n         */\r\n        this.approxItemHeight = 45;\r\n        /**\r\n         * The approximate height of each header template's cell.\r\n         * This dimension is used to help determine how many cells should\r\n         * be created when initialized, and to help calculate the height of\r\n         * the scrollable area. This height value can only use `px` units.\r\n         * Note that the actual rendered size of each cell comes from the\r\n         * app's CSS, whereas this approximation is used to help calculate\r\n         * initial dimensions before the item has been rendered.\r\n         */\r\n        this.approxHeaderHeight = 30;\r\n        /**\r\n         * The approximate width of each footer template's cell.\r\n         * This dimension is used to help determine how many cells should\r\n         * be created when initialized, and to help calculate the height of\r\n         * the scrollable area. This height value can only use `px` units.\r\n         * Note that the actual rendered size of each cell comes from the\r\n         * app's CSS, whereas this approximation is used to help calculate\r\n         * initial dimensions before the item has been rendered.\r\n         */\r\n        this.approxFooterHeight = 30;\r\n        this.onScroll = () => {\r\n            this.updateVirtualScroll();\r\n        };\r\n    }\r\n    itemsChanged() {\r\n        this.calcCells();\r\n        this.updateVirtualScroll();\r\n    }\r\n    async connectedCallback() {\r\n        const contentEl = this.el.closest('ion-content');\r\n        if (!contentEl) {\r\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\r\n            return;\r\n        }\r\n        this.scrollEl = await contentEl.getScrollElement();\r\n        this.contentEl = contentEl;\r\n        this.calcCells();\r\n        this.updateState();\r\n    }\r\n    componentDidUpdate() {\r\n        this.updateState();\r\n    }\r\n    disconnectedCallback() {\r\n        this.scrollEl = undefined;\r\n    }\r\n    onResize() {\r\n        this.calcCells();\r\n        this.updateVirtualScroll();\r\n    }\r\n    /**\r\n     * Returns the position of the virtual item at the given index.\r\n     */\r\n    positionForItem(index) {\r\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\r\n    }\r\n    /**\r\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\r\n     * dirty any time the content or their style changes.\r\n     *\r\n     * The subset of items to be updated can are specifing by an offset and a length.\r\n     */\r\n    async checkRange(offset, len = -1) {\r\n        // TODO: kind of hacky how we do in-place updated of the cells\r\n        // array. this part needs a complete refactor\r\n        if (!this.items) {\r\n            return;\r\n        }\r\n        const length = (len === -1)\r\n            ? this.items.length - offset\r\n            : len;\r\n        const cellIndex = findCellIndex(this.cells, offset);\r\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\r\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\r\n        this.lastItemLen = this.items.length;\r\n        this.indexDirty = Math.max(offset - 1, 0);\r\n        this.scheduleUpdate();\r\n    }\r\n    /**\r\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\r\n     *\r\n     * It's equivalent to calling:\r\n     *\r\n     * ```js\r\n     * virtualScroll.checkRange(lastItemLen);\r\n     * ```\r\n     */\r\n    async checkEnd() {\r\n        if (this.items) {\r\n            this.checkRange(this.lastItemLen);\r\n        }\r\n    }\r\n    updateVirtualScroll() {\r\n        // do nothing if virtual-scroll is disabled\r\n        if (!this.isEnabled || !this.scrollEl) {\r\n            return;\r\n        }\r\n        // unschedule future updates\r\n        if (this.timerUpdate) {\r\n            clearTimeout(this.timerUpdate);\r\n            this.timerUpdate = undefined;\r\n        }\r\n        // schedule DOM operations into the stencil queue\r\n        readTask(this.readVS.bind(this));\r\n        writeTask(this.writeVS.bind(this));\r\n    }\r\n    readVS() {\r\n        const { contentEl, scrollEl, el } = this;\r\n        let topOffset = 0;\r\n        let node = el;\r\n        while (node && node !== contentEl) {\r\n            topOffset += node.offsetTop;\r\n            node = node.parentElement;\r\n        }\r\n        this.viewportOffset = topOffset;\r\n        if (scrollEl) {\r\n            this.viewportHeight = scrollEl.offsetHeight;\r\n            this.currentScrollTop = scrollEl.scrollTop;\r\n        }\r\n    }\r\n    writeVS() {\r\n        const dirtyIndex = this.indexDirty;\r\n        // get visible viewport\r\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\r\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\r\n        // compute lazily the height index\r\n        const heightIndex = this.getHeightIndex();\r\n        // get array bounds of visible cells base in the viewport\r\n        const range = getRange(heightIndex, viewport, 2);\r\n        // fast path, do nothing\r\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\r\n        if (!shouldUpdate) {\r\n            return;\r\n        }\r\n        this.range = range;\r\n        // in place mutation of the virtual DOM\r\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\r\n        // Write DOM\r\n        // Different code paths taken depending of the render API used\r\n        if (this.nodeRender) {\r\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\r\n        }\r\n        else if (this.domRender) {\r\n            this.domRender(this.virtualDom);\r\n        }\r\n        else if (this.renderItem) {\r\n            forceUpdate(this);\r\n        }\r\n    }\r\n    updateCellHeight(cell, node) {\r\n        const update = () => {\r\n            if (node['$ionCell'] === cell) {\r\n                const style = window.getComputedStyle(node);\r\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\r\n                this.setCellHeight(cell, height);\r\n            }\r\n        };\r\n        if (node && node.componentOnReady) {\r\n            node.componentOnReady().then(update);\r\n        }\r\n        else {\r\n            update();\r\n        }\r\n    }\r\n    setCellHeight(cell, height) {\r\n        const index = cell.i;\r\n        // the cell might changed since the height update was scheduled\r\n        if (cell !== this.cells[index]) {\r\n            return;\r\n        }\r\n        if (cell.height !== height || cell.visible !== true) {\r\n            cell.visible = true;\r\n            cell.height = height;\r\n            this.indexDirty = Math.min(this.indexDirty, index);\r\n            this.scheduleUpdate();\r\n        }\r\n    }\r\n    scheduleUpdate() {\r\n        clearTimeout(this.timerUpdate);\r\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\r\n    }\r\n    updateState() {\r\n        const shouldEnable = !!(this.scrollEl &&\r\n            this.cells);\r\n        if (shouldEnable !== this.isEnabled) {\r\n            this.enableScrollEvents(shouldEnable);\r\n            if (shouldEnable) {\r\n                this.updateVirtualScroll();\r\n            }\r\n        }\r\n    }\r\n    calcCells() {\r\n        if (!this.items) {\r\n            return;\r\n        }\r\n        this.lastItemLen = this.items.length;\r\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\r\n        this.indexDirty = 0;\r\n    }\r\n    getHeightIndex() {\r\n        if (this.indexDirty !== Infinity) {\r\n            this.calcHeightIndex(this.indexDirty);\r\n        }\r\n        return this.heightIndex;\r\n    }\r\n    calcHeightIndex(index = 0) {\r\n        // TODO: optimize, we don't need to calculate all the cells\r\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\r\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\r\n        this.indexDirty = Infinity;\r\n    }\r\n    enableScrollEvents(shouldListen) {\r\n        if (this.rmEvent) {\r\n            this.rmEvent();\r\n            this.rmEvent = undefined;\r\n        }\r\n        const scrollEl = this.scrollEl;\r\n        if (scrollEl) {\r\n            this.isEnabled = shouldListen;\r\n            scrollEl.addEventListener('scroll', this.onScroll);\r\n            this.rmEvent = () => {\r\n                scrollEl.removeEventListener('scroll', this.onScroll);\r\n            };\r\n        }\r\n    }\r\n    renderVirtualNode(node) {\r\n        const { type, value, index } = node.cell;\r\n        switch (type) {\r\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\r\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\r\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\r\n        }\r\n    }\r\n    render() {\r\n        return (h(Host, { style: {\r\n                height: `${this.totalHeight}px`\r\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"itemHeight\": [\"itemsChanged\"],\r\n        \"headerHeight\": [\"itemsChanged\"],\r\n        \"footerHeight\": [\"itemsChanged\"],\r\n        \"items\": [\"itemsChanged\"]\r\n    }; }\r\n};\r\nconst VirtualProxy = ({ dom }, children, utils) => {\r\n    return utils.map(children, (child, i) => {\r\n        const node = dom[i];\r\n        const vattrs = child.vattrs || {};\r\n        let classes = vattrs.class || '';\r\n        classes += 'virtual-item ';\r\n        if (!node.visible) {\r\n            classes += 'virtual-loading';\r\n        }\r\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\r\n    });\r\n};\r\nVirtualScroll.style = virtualScrollCss;\r\n\r\nexport { VirtualScroll as ion_virtual_scroll };\r\n"],"sourceRoot":"webpack:///"}
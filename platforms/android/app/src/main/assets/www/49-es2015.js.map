{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-refresher_2-ios.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4I;AACjD;AAC9D;AACR;AACwC;AACE;AAClC;AACS;AACD;AACqC;AAC7C;AACgC;AACjB;AACf;AACG;AAC8B;;AAE9D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;AACrC,KAAK;AACL;AACA,qBAAqB,iBAAiB;AACtC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,gEAAe;AACzC;AACA;AACA,2CAA2C,gEAAe;AAC1D;AACA;AACA,SAAS,4BAA4B;AACrC,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS;AACT;AACA,iCAAiC,gEAAe;AAChD;AACA;AACA,SAAS,2CAA2C;AACpD,SAAS,8CAA8C;AACvD,SAAS,gDAAgD;AACzD,SAAS;AACT;AACA,iCAAiC,gEAAe;AAChD;AACA;AACA,SAAS,yCAAyC;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,gEAAe;AACvD;AACA;AACA,aAAa,uCAAuC;AACpD,aAAa,0CAA0C;AACvD,aAAa,4CAA4C;AACzD,aAAa;AACb;AACA,+BAA+B,gEAAe;AAC9C;AA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yDAAyD,kBAAkB,mBAAmB,0BAA0B,yBAAyB,wBAAwB,wBAAwB,kLAAkL,oBAAoB,aAAa,gSAAgS,oBAAoB,aAAa,uDAAuD,iDAAiD,yCAAyC,iHAAiH,iBAAiB,kBAAkB,aAAa,gBAAgB,mBAAmB,iBAAiB,kBAAkB,gBAAgB,mBAAmB,oBAAoB,aAAa,yBAAyB,iBAAiB,kDAAkD,0CAA0C,+FAA+F,iHAAiH,kBAAkB,mBAAmB,0BAA0B,yBAAyB,wBAAwB,wBAAwB,+FAA+F,iHAAiH,mBAAmB,oBAAoB,0BAA0B,yBAAyB,wBAAwB,wBAAwB;;AAEz6K;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAW;AACrC,uBAAuB,4DAAW;AAClC,wBAAwB,4DAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,mEAAU;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAS;AACjB;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,8DAAK;AAC3C,wBAAwB,4DAAS;AACjC;AACA;AACA,oBAAoB,4DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8DAAK;AACrC,mDAAmD,8DAAK;AACxD,0CAA0C,8DAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA,yEAAyE,gBAAgB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8BAA8B,yJAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAQ,oDAAoD,qBAAqB;AACrG;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAS;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,8BAA8B,yJAA6B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,gCAAgC,8DAAK;AACrC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB,4DAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iCAAiC,mEAAuB;AACxD;AACA;AACA,gBAAgB,4DAAS;AACzB,mGAAmG,iBAAiB;AACpH;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mEAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mEAAU;AACxD;AACA;AACA;AACA,kCAAkC,yJAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAG,OAAO,8DAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAAG,OAAO,8DAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4DAAS;AACjB;AACA;AACA;AACA,6FAA6F,EAAE;AAC/F;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,mEAAU;AAC/B,gBAAgB,4DAAC,CAAC,oDAAI,GAAG;AACzB;AACA;AACA,8BAA8B,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA,yBAAyB,mEAAU;AACnC;AACA,+BAA+B,2DAAM,yCAAyC,mEAAU,aAAa,2DAAM;AAC3G;AACA;AACA,yBAAyB,mEAAU;AACnC,qCAAqC,2DAAM,0BAA0B,2DAAM;AAC3E;AACA;AACA;AACA;AACA,kDAAkD,+DAAQ;AAC1D,qBAAqB,mEAAU;AAC/B,gBAAgB,4DAAC,CAAC,oDAAI,GAAG,cAAc,EAAE,4DAAC,SAAS,6BAA6B;AAChF,YAAY,4DAAC,SAAS,kCAAkC,EAAE,4DAAC,SAAS,mCAAmC,EAAE,4DAAC,iBAAiB,uCAAuC;AAClK,gBAAgB,4DAAC,SAAS,2BAA2B,EAAE,4DAAC,cAAc,2BAA2B;AACjG,YAAY,4DAAC,SAAS,kCAAkC,EAAE,4DAAC,cAAc,sCAAsC;AAC/G,YAAY,4DAAC,SAAS,6CAA6C,6DAAiB,oBAAoB,IAAI,4DAAC,SAAS,gCAAgC;AACtJ,YAAY,4DAAC,SAAS,qCAAqC,EAAE,4DAAC,iBAAiB,+BAA+B;AAC9G,YAAY,4DAAC,SAAS,gDAAgD,6DAAiB,uBAAuB;AAC9G;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC;;AAEiF","file":"49-es2015.js","sourcesContent":["import { w as writeTask, r as registerInstance, d as createEvent, f as readTask, h, e as getElement, H as Host } from './index-26ec602c.js';\r\nimport { i as isPlatform, b as getIonMode, c as config } from './ionic-global-1bf1fa84.js';\r\nimport './utils-6acbf959.js';\r\nimport './index.mjs';\r\nimport { c as clamp, r as raf } from './helpers-d8b49b57.js';\r\nimport { c as createAnimation } from './animation-47fafd47.js';\r\nimport './index-e98418f5.js';\r\nimport './ios.transition-fd5c1433.js';\r\nimport './md.transition-b6943aed.js';\r\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\r\nimport './index-6f647ec8.js';\r\nimport { s as sanitizeDOMString } from './index-79d74e0b.js';\r\nimport './hardware-back-button-7b6ede21.js';\r\nimport './index-6941d9b4.js';\r\nimport './overlays-7e61a613.js';\r\nimport { S as SPINNERS } from './spinner-configs-c78e170e.js';\r\n\r\nconst HapticEngine = {\r\n    getEngine() {\r\n        const win = window;\r\n        return (win.TapticEngine) || (win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics);\r\n    },\r\n    available() {\r\n        return !!this.getEngine();\r\n    },\r\n    isCordova() {\r\n        return !!window.TapticEngine;\r\n    },\r\n    isCapacitor() {\r\n        const win = window;\r\n        return !!win.Capacitor;\r\n    },\r\n    impact(options) {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\r\n        engine.impact({ style });\r\n    },\r\n    notification(options) {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\r\n        engine.notification({ style });\r\n    },\r\n    selection() {\r\n        this.impact({ style: 'light' });\r\n    },\r\n    selectionStart() {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        if (this.isCapacitor()) {\r\n            engine.selectionStart();\r\n        }\r\n        else {\r\n            engine.gestureSelectionStart();\r\n        }\r\n    },\r\n    selectionChanged() {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        if (this.isCapacitor()) {\r\n            engine.selectionChanged();\r\n        }\r\n        else {\r\n            engine.gestureSelectionChanged();\r\n        }\r\n    },\r\n    selectionEnd() {\r\n        const engine = this.getEngine();\r\n        if (!engine) {\r\n            return;\r\n        }\r\n        if (this.isCapacitor()) {\r\n            engine.selectionChanged();\r\n        }\r\n        else {\r\n            engine.gestureSelectionChanged();\r\n        }\r\n    }\r\n};\r\n/**\r\n * Use this to indicate success/failure/warning to the user.\r\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\r\n */\r\nconst hapticImpact = (options) => {\r\n    HapticEngine.impact(options);\r\n};\r\n\r\nconst getRefresherAnimationType = (contentEl) => {\r\n    const previousSibling = contentEl.previousElementSibling;\r\n    const hasHeader = previousSibling !== null && previousSibling.tagName === 'ION-HEADER';\r\n    return hasHeader ? 'translate' : 'scale';\r\n};\r\nconst createPullingAnimation = (type, pullingSpinner) => {\r\n    return type === 'scale' ? createScaleAnimation(pullingSpinner) : createTranslateAnimation(pullingSpinner);\r\n};\r\nconst createBaseAnimation = (pullingRefresherIcon) => {\r\n    const spinner = pullingRefresherIcon.querySelector('ion-spinner');\r\n    const circle = spinner.shadowRoot.querySelector('circle');\r\n    const spinnerArrowContainer = pullingRefresherIcon.querySelector('.spinner-arrow-container');\r\n    const arrowContainer = pullingRefresherIcon.querySelector('.arrow-container');\r\n    const arrow = (arrowContainer) ? arrowContainer.querySelector('ion-icon') : null;\r\n    const baseAnimation = createAnimation()\r\n        .duration(1000)\r\n        .easing('ease-out');\r\n    const spinnerArrowContainerAnimation = createAnimation()\r\n        .addElement(spinnerArrowContainer)\r\n        .keyframes([\r\n        { offset: 0, opacity: '0.3' },\r\n        { offset: 0.45, opacity: '0.3' },\r\n        { offset: 0.55, opacity: '1' },\r\n        { offset: 1, opacity: '1' }\r\n    ]);\r\n    const circleInnerAnimation = createAnimation()\r\n        .addElement(circle)\r\n        .keyframes([\r\n        { offset: 0, strokeDasharray: '1px, 200px' },\r\n        { offset: 0.20, strokeDasharray: '1px, 200px' },\r\n        { offset: 0.55, strokeDasharray: '100px, 200px' },\r\n        { offset: 1, strokeDasharray: '100px, 200px' }\r\n    ]);\r\n    const circleOuterAnimation = createAnimation()\r\n        .addElement(spinner)\r\n        .keyframes([\r\n        { offset: 0, transform: 'rotate(-90deg)' },\r\n        { offset: 1, transform: 'rotate(210deg)' }\r\n    ]);\r\n    /**\r\n     * Only add arrow animation if present\r\n     * this allows users to customize the spinners\r\n     * without errors being thrown\r\n     */\r\n    if (arrowContainer && arrow) {\r\n        const arrowContainerAnimation = createAnimation()\r\n            .addElement(arrowContainer)\r\n            .keyframes([\r\n            { offset: 0, transform: 'rotate(0deg)' },\r\n            { offset: 0.30, transform: 'rotate(0deg)' },\r\n            { offset: 0.55, transform: 'rotate(280deg)' },\r\n            { offset: 1, transform: 'rotate(400deg)' }\r\n        ]);\r\n        const arrowAnimation = createAnimation()\r\n            .addElement(arrow)\r\n            .keyframes([\r\n            { offset: 0, transform: 'translateX(2px) scale(0)' },\r\n            { offset: 0.30, transform: 'translateX(2px) scale(0)' },\r\n            { offset: 0.55, transform: 'translateX(-1.5px) scale(1)' },\r\n            { offset: 1, transform: 'translateX(-1.5px) scale(1)' }\r\n        ]);\r\n        baseAnimation.addAnimation([arrowContainerAnimation, arrowAnimation]);\r\n    }\r\n    return baseAnimation.addAnimation([spinnerArrowContainerAnimation, circleInnerAnimation, circleOuterAnimation]);\r\n};\r\nconst createScaleAnimation = (pullingRefresherIcon) => {\r\n    const height = pullingRefresherIcon.clientHeight;\r\n    const spinnerAnimation = createAnimation()\r\n        .addElement(pullingRefresherIcon)\r\n        .keyframes([\r\n        { offset: 0, transform: `scale(0) translateY(-${height + 20}px)` },\r\n        { offset: 1, transform: 'scale(1) translateY(100px)' }\r\n    ]);\r\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\r\n};\r\nconst createTranslateAnimation = (pullingRefresherIcon) => {\r\n    const height = pullingRefresherIcon.clientHeight;\r\n    const spinnerAnimation = createAnimation()\r\n        .addElement(pullingRefresherIcon)\r\n        .keyframes([\r\n        { offset: 0, transform: `translateY(-${height + 20}px)` },\r\n        { offset: 1, transform: 'translateY(100px)' }\r\n    ]);\r\n    return createBaseAnimation(pullingRefresherIcon).addAnimation([spinnerAnimation]);\r\n};\r\nconst createSnapBackAnimation = (pullingRefresherIcon) => {\r\n    return createAnimation()\r\n        .duration(125)\r\n        .addElement(pullingRefresherIcon)\r\n        .fromTo('transform', 'translateY(var(--ion-pulling-refresher-translate, 100px))', 'translateY(0px)');\r\n};\r\n// iOS Native Refresher\r\n// -----------------------------\r\nconst setSpinnerOpacity = (spinner, opacity) => {\r\n    spinner.style.setProperty('opacity', opacity.toString());\r\n};\r\nconst handleScrollWhilePulling = (spinner, ticks, opacity, currentTickToShow) => {\r\n    writeTask(() => {\r\n        setSpinnerOpacity(spinner, opacity);\r\n        ticks.forEach((el, i) => el.style.setProperty('opacity', (i <= currentTickToShow) ? '0.99' : '0'));\r\n    });\r\n};\r\nconst handleScrollWhileRefreshing = (spinner, lastVelocityY) => {\r\n    writeTask(() => {\r\n        // If user pulls down quickly, the spinner should spin faster\r\n        spinner.style.setProperty('--refreshing-rotation-duration', (lastVelocityY >= 1.0) ? '0.5s' : '2s');\r\n        spinner.style.setProperty('opacity', '1');\r\n    });\r\n};\r\nconst translateElement = (el, value) => {\r\n    if (!el) {\r\n        return Promise.resolve();\r\n    }\r\n    const trans = transitionEndAsync(el);\r\n    writeTask(() => {\r\n        el.style.setProperty('transition', '0.2s all ease-out');\r\n        if (value === undefined) {\r\n            el.style.removeProperty('transform');\r\n        }\r\n        else {\r\n            el.style.setProperty('transform', `translate3d(0px, ${value}, 0px)`);\r\n        }\r\n    });\r\n    return trans;\r\n};\r\n// Utils\r\n// -----------------------------\r\nconst shouldUseNativeRefresher = (referenceEl, mode) => {\r\n    const pullingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\r\n    const refreshingSpinner = referenceEl.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\r\n    return (pullingSpinner !== null &&\r\n        refreshingSpinner !== null &&\r\n        ((mode === 'ios' && isPlatform('mobile') && referenceEl.style.webkitOverflowScrolling !== undefined) ||\r\n            mode === 'md'));\r\n};\r\nconst transitionEndAsync = (el) => {\r\n    return new Promise(resolve => {\r\n        transitionEnd(el, resolve);\r\n    });\r\n};\r\nconst transitionEnd = (el, callback) => {\r\n    let unRegTrans;\r\n    const opts = { passive: true };\r\n    const unregister = () => {\r\n        if (unRegTrans) {\r\n            unRegTrans();\r\n        }\r\n    };\r\n    const onTransitionEnd = (ev) => {\r\n        if (el === ev.target) {\r\n            unregister();\r\n            callback(ev);\r\n        }\r\n    };\r\n    if (el) {\r\n        el.addEventListener('webkitTransitionEnd', onTransitionEnd, opts);\r\n        el.addEventListener('transitionend', onTransitionEnd, opts);\r\n        unRegTrans = () => {\r\n            el.removeEventListener('webkitTransitionEnd', onTransitionEnd, opts);\r\n            el.removeEventListener('transitionend', onTransitionEnd, opts);\r\n        };\r\n    }\r\n    return unregister;\r\n};\r\n\r\nconst refresherIosCss = \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}[dir=rtl] ion-refresher,:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}[dir=rtl] .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line,.refresher-ios .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native ion-spinner{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}.refresher-native .refresher-refreshing ion-spinner{--refreshing-rotation-duration:2s;display:none;-webkit-animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards;animation:var(--refreshing-rotation-duration) ease-out refresher-rotate forwards}.refresher-native .refresher-refreshing{display:none;-webkit-animation:250ms linear refresher-pop forwards;animation:250ms linear refresher-pop forwards}.refresher-native.refresher-refreshing .refresher-pulling ion-spinner,.refresher-native.refresher-completing .refresher-pulling ion-spinner{display:none}.refresher-native.refresher-refreshing .refresher-refreshing ion-spinner,.refresher-native.refresher-completing .refresher-refreshing ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-pulling ion-spinner{display:block}.refresher-native.refresher-pulling .refresher-refreshing ion-spinner{display:none}@-webkit-keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes refresher-pop{0%{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}50%{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}100%{-webkit-transform:scale(1);transform:scale(1)}}@-webkit-keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}@keyframes refresher-rotate{from{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(180deg);transform:rotate(180deg)}}\";\r\n\r\nconst refresherMdCss = \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;pointer-events:none;z-index:-1}[dir=rtl] ion-refresher,:host-context([dir=rtl]) ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:200ms;transition:200ms;font-size:30px;text-align:center}[dir=rtl] .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon,:host-context([dir=rtl]) .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}ion-refresher-content .arrow-container{display:none}.refresher-pulling ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-native .refresher-pulling-text,.refresher-native .refresher-refreshing-text{display:none}.refresher-md .refresher-pulling-icon,.refresher-md .refresher-refreshing-icon{color:var(--ion-text-color, #000)}.refresher-md .refresher-pulling-text,.refresher-md .refresher-refreshing-text{color:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-lines-md line,.refresher-md .refresher-refreshing .spinner-lines-small-md line,.refresher-md .refresher-refreshing .spinner-crescent circle{stroke:var(--ion-text-color, #000)}.refresher-md .refresher-refreshing .spinner-bubbles circle,.refresher-md .refresher-refreshing .spinner-circles circle,.refresher-md .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color, #000)}ion-refresher.refresher-native{display:block;z-index:1}ion-refresher.refresher-native ion-spinner{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:24px;height:24px;color:var(--ion-color-primary, #3880ff)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native ion-spinner{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}ion-refresher.refresher-native .spinner-arrow-container{display:inherit}ion-refresher.refresher-native .arrow-container{display:block;position:absolute;width:24px;height:24px}ion-refresher.refresher-native .arrow-container ion-icon{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;left:0;right:0;bottom:-4px;position:absolute;color:var(--ion-color-primary, #3880ff);font-size:12px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .arrow-container ion-icon{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}ion-refresher.refresher-native.refresher-pulling ion-refresher-content .refresher-pulling,ion-refresher.refresher-native.refresher-ready ion-refresher-content .refresher-pulling{display:-ms-flexbox;display:flex}ion-refresher.refresher-native.refresher-refreshing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-completing ion-refresher-content .refresher-refreshing,ion-refresher.refresher-native.refresher-cancelling ion-refresher-content .refresher-refreshing{display:-ms-flexbox;display:flex}ion-refresher.refresher-native .refresher-pulling-icon{-webkit-transform:translateY(calc(-100% - 10px));transform:translateY(calc(-100% - 10px))}ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;border-radius:100%;padding-left:8px;padding-right:8px;padding-top:8px;padding-bottom:8px;display:-ms-flexbox;display:flex;border:1px solid #ececec;background:white;-webkit-box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1);box-shadow:0px 1px 6px rgba(0, 0, 0, 0.1)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){ion-refresher.refresher-native .refresher-pulling-icon,ion-refresher.refresher-native .refresher-refreshing-icon{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}\";\r\n\r\nconst Refresher = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.appliedStyles = false;\r\n        this.didStart = false;\r\n        this.progress = 0;\r\n        this.pointerDown = false;\r\n        this.needsCompletion = false;\r\n        this.didRefresh = false;\r\n        this.lastVelocityY = 0;\r\n        this.animations = [];\r\n        this.nativeRefresher = false;\r\n        /**\r\n         * The current state which the refresher is in. The refresher's states include:\r\n         *\r\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\r\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\r\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\r\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\r\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\r\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\r\n         */\r\n        this.state = 1 /* Inactive */;\r\n        /**\r\n         * The minimum distance the user must pull down until the\r\n         * refresher will go into the `refreshing` state.\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.pullMin = 60;\r\n        /**\r\n         * The maximum distance of the pull until the refresher\r\n         * will automatically go into the `refreshing` state.\r\n         * Defaults to the result of `pullMin + 60`.\r\n         * Does not apply when  the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.pullMax = this.pullMin + 60;\r\n        /**\r\n         * Time it takes to close the refresher.\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.closeDuration = '280ms';\r\n        /**\r\n         * Time it takes the refresher to to snap back to the `refreshing` state.\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.snapbackDuration = '280ms';\r\n        /**\r\n         * How much to multiply the pull speed by. To slow the pull animation down,\r\n         * pass a number less than `1`. To speed up the pull, pass a number greater\r\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\r\n         * If a negative value is passed in, the factor will be `1` instead.\r\n         *\r\n         * For example: If the value passed is `1.2` and the content is dragged by\r\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\r\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\r\n         * will be `8` pixels, less than the amount the cursor has moved.\r\n         *\r\n         * Does not apply when the refresher content uses a spinner,\r\n         * enabling the native refresher.\r\n         */\r\n        this.pullFactor = 1;\r\n        /**\r\n         * If `true`, the refresher will be hidden.\r\n         */\r\n        this.disabled = false;\r\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\r\n        this.ionPull = createEvent(this, \"ionPull\", 7);\r\n        this.ionStart = createEvent(this, \"ionStart\", 7);\r\n    }\r\n    disabledChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.enable(!this.disabled);\r\n        }\r\n    }\r\n    checkNativeRefresher() {\r\n        const useNativeRefresher = shouldUseNativeRefresher(this.el, getIonMode(this));\r\n        if (useNativeRefresher && !this.nativeRefresher) {\r\n            const contentEl = this.el.closest('ion-content');\r\n            this.setupNativeRefresher(contentEl);\r\n        }\r\n        else if (!useNativeRefresher) {\r\n            this.destroyNativeRefresher();\r\n        }\r\n    }\r\n    destroyNativeRefresher() {\r\n        if (this.scrollEl && this.scrollListenerCallback) {\r\n            this.scrollEl.removeEventListener('scroll', this.scrollListenerCallback);\r\n            this.scrollListenerCallback = undefined;\r\n        }\r\n        this.nativeRefresher = false;\r\n    }\r\n    async resetNativeRefresher(el, state) {\r\n        this.state = state;\r\n        if (getIonMode(this) === 'ios') {\r\n            await translateElement(el, undefined);\r\n        }\r\n        else {\r\n            await transitionEndAsync(this.el.querySelector('.refresher-refreshing-icon'));\r\n        }\r\n        this.didRefresh = false;\r\n        this.needsCompletion = false;\r\n        this.pointerDown = false;\r\n        this.animations.forEach(ani => ani.destroy());\r\n        this.animations = [];\r\n        this.progress = 0;\r\n        this.state = 1 /* Inactive */;\r\n    }\r\n    async setupiOSNativeRefresher(pullingSpinner, refreshingSpinner) {\r\n        this.elementToTransform = this.scrollEl;\r\n        const ticks = pullingSpinner.shadowRoot.querySelectorAll('svg');\r\n        const MAX_PULL = this.scrollEl.clientHeight * 0.16;\r\n        const NUM_TICKS = ticks.length;\r\n        writeTask(() => ticks.forEach(el => el.style.setProperty('animation', 'none')));\r\n        this.scrollListenerCallback = () => {\r\n            // If pointer is not on screen or refresher is not active, ignore scroll\r\n            if (!this.pointerDown && this.state === 1 /* Inactive */) {\r\n                return;\r\n            }\r\n            readTask(() => {\r\n                // PTR should only be active when overflow scrolling at the top\r\n                const scrollTop = this.scrollEl.scrollTop;\r\n                const refresherHeight = this.el.clientHeight;\r\n                if (scrollTop > 0) {\r\n                    /**\r\n                     * If refresher is refreshing and user tries to scroll\r\n                     * progressively fade refresher out/in\r\n                     */\r\n                    if (this.state === 8 /* Refreshing */) {\r\n                        const ratio = clamp(0, scrollTop / (refresherHeight * 0.5), 1);\r\n                        writeTask(() => setSpinnerOpacity(refreshingSpinner, 1 - ratio));\r\n                        return;\r\n                    }\r\n                    writeTask(() => setSpinnerOpacity(pullingSpinner, 0));\r\n                    return;\r\n                }\r\n                if (this.pointerDown) {\r\n                    if (!this.didStart) {\r\n                        this.didStart = true;\r\n                        this.ionStart.emit();\r\n                    }\r\n                    // emit \"pulling\" on every move\r\n                    if (this.pointerDown) {\r\n                        this.ionPull.emit();\r\n                    }\r\n                }\r\n                // delay showing the next tick marks until user has pulled 30px\r\n                const opacity = clamp(0, Math.abs(scrollTop) / refresherHeight, 0.99);\r\n                const pullAmount = this.progress = clamp(0, (Math.abs(scrollTop) - 30) / MAX_PULL, 1);\r\n                const currentTickToShow = clamp(0, Math.floor(pullAmount * NUM_TICKS), NUM_TICKS - 1);\r\n                const shouldShowRefreshingSpinner = this.state === 8 /* Refreshing */ || currentTickToShow === NUM_TICKS - 1;\r\n                if (shouldShowRefreshingSpinner) {\r\n                    if (this.pointerDown) {\r\n                        handleScrollWhileRefreshing(refreshingSpinner, this.lastVelocityY);\r\n                    }\r\n                    if (!this.didRefresh) {\r\n                        this.beginRefresh();\r\n                        this.didRefresh = true;\r\n                        hapticImpact({ style: 'light' });\r\n                        /**\r\n                         * Translate the content element otherwise when pointer is removed\r\n                         * from screen the scroll content will bounce back over the refresher\r\n                         */\r\n                        if (!this.pointerDown) {\r\n                            translateElement(this.elementToTransform, `${refresherHeight}px`);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this.state = 2 /* Pulling */;\r\n                    handleScrollWhilePulling(pullingSpinner, ticks, opacity, currentTickToShow);\r\n                }\r\n            });\r\n        };\r\n        this.scrollEl.addEventListener('scroll', this.scrollListenerCallback);\r\n        this.gesture = (await import('./index-6f647ec8.js')).createGesture({\r\n            el: this.scrollEl,\r\n            gestureName: 'refresher',\r\n            gesturePriority: 10,\r\n            direction: 'y',\r\n            threshold: 5,\r\n            onStart: () => {\r\n                this.pointerDown = true;\r\n                if (!this.didRefresh) {\r\n                    translateElement(this.elementToTransform, '0px');\r\n                }\r\n            },\r\n            onMove: ev => {\r\n                this.lastVelocityY = ev.velocityY;\r\n            },\r\n            onEnd: () => {\r\n                this.pointerDown = false;\r\n                this.didStart = false;\r\n                if (this.needsCompletion) {\r\n                    this.resetNativeRefresher(this.elementToTransform, 32 /* Completing */);\r\n                    this.needsCompletion = false;\r\n                }\r\n                else if (this.didRefresh) {\r\n                    readTask(() => translateElement(this.elementToTransform, `${this.el.clientHeight}px`));\r\n                }\r\n            },\r\n        });\r\n        this.disabledChanged();\r\n    }\r\n    async setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner) {\r\n        const circle = pullingSpinner.shadowRoot.querySelector('circle');\r\n        const pullingRefresherIcon = this.el.querySelector('ion-refresher-content .refresher-pulling-icon');\r\n        const refreshingCircle = refreshingSpinner.shadowRoot.querySelector('circle');\r\n        if (circle !== null && refreshingCircle !== null) {\r\n            writeTask(() => {\r\n                circle.style.setProperty('animation', 'none');\r\n                // This lines up the animation on the refreshing spinner with the pulling spinner\r\n                refreshingSpinner.style.setProperty('animation-delay', '-655ms');\r\n                refreshingCircle.style.setProperty('animation-delay', '-655ms');\r\n            });\r\n        }\r\n        this.gesture = (await import('./index-6f647ec8.js')).createGesture({\r\n            el: this.scrollEl,\r\n            gestureName: 'refresher',\r\n            gesturePriority: 10,\r\n            direction: 'y',\r\n            threshold: 5,\r\n            canStart: () => this.state !== 8 /* Refreshing */ && this.state !== 32 /* Completing */ && this.scrollEl.scrollTop === 0,\r\n            onStart: (ev) => {\r\n                ev.data = { animation: undefined, didStart: false, cancelled: false };\r\n            },\r\n            onMove: (ev) => {\r\n                if ((ev.velocityY < 0 && this.progress === 0 && !ev.data.didStart) || ev.data.cancelled) {\r\n                    ev.data.cancelled = true;\r\n                    return;\r\n                }\r\n                if (!ev.data.didStart) {\r\n                    ev.data.didStart = true;\r\n                    this.state = 2 /* Pulling */;\r\n                    writeTask(() => {\r\n                        const animationType = getRefresherAnimationType(contentEl);\r\n                        const animation = createPullingAnimation(animationType, pullingRefresherIcon);\r\n                        ev.data.animation = animation;\r\n                        this.scrollEl.style.setProperty('--overflow', 'hidden');\r\n                        animation.progressStart(false, 0);\r\n                        this.ionStart.emit();\r\n                        this.animations.push(animation);\r\n                    });\r\n                    return;\r\n                }\r\n                // Since we are using an easing curve, slow the gesture tracking down a bit\r\n                this.progress = clamp(0, (ev.deltaY / 180) * 0.5, 1);\r\n                ev.data.animation.progressStep(this.progress);\r\n                this.ionPull.emit();\r\n            },\r\n            onEnd: (ev) => {\r\n                if (!ev.data.didStart) {\r\n                    return;\r\n                }\r\n                writeTask(() => this.scrollEl.style.removeProperty('--overflow'));\r\n                if (this.progress <= 0.4) {\r\n                    this.gesture.enable(false);\r\n                    ev.data.animation\r\n                        .progressEnd(0, this.progress, 500)\r\n                        .onFinish(() => {\r\n                        this.animations.forEach(ani => ani.destroy());\r\n                        this.animations = [];\r\n                        this.gesture.enable(true);\r\n                        this.state = 1 /* Inactive */;\r\n                    });\r\n                    return;\r\n                }\r\n                const progress = getTimeGivenProgression([0, 0], [0, 0], [1, 1], [1, 1], this.progress)[0];\r\n                const snapBackAnimation = createSnapBackAnimation(pullingRefresherIcon);\r\n                this.animations.push(snapBackAnimation);\r\n                writeTask(async () => {\r\n                    pullingRefresherIcon.style.setProperty('--ion-pulling-refresher-translate', `${(progress * 100)}px`);\r\n                    ev.data.animation.progressEnd();\r\n                    await snapBackAnimation.play();\r\n                    this.beginRefresh();\r\n                    ev.data.animation.destroy();\r\n                });\r\n            }\r\n        });\r\n        this.disabledChanged();\r\n    }\r\n    async setupNativeRefresher(contentEl) {\r\n        if (this.scrollListenerCallback || !contentEl || this.nativeRefresher || !this.scrollEl) {\r\n            return;\r\n        }\r\n        this.nativeRefresher = true;\r\n        const pullingSpinner = this.el.querySelector('ion-refresher-content .refresher-pulling ion-spinner');\r\n        const refreshingSpinner = this.el.querySelector('ion-refresher-content .refresher-refreshing ion-spinner');\r\n        await contentEl.componentOnReady();\r\n        if (getIonMode(this) === 'ios') {\r\n            this.setupiOSNativeRefresher(pullingSpinner, refreshingSpinner);\r\n        }\r\n        else {\r\n            this.setupMDNativeRefresher(contentEl, pullingSpinner, refreshingSpinner);\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        this.checkNativeRefresher();\r\n    }\r\n    async connectedCallback() {\r\n        if (this.el.getAttribute('slot') !== 'fixed') {\r\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\r\n            return;\r\n        }\r\n        const contentEl = this.el.closest('ion-content');\r\n        if (!contentEl) {\r\n            console.error('<ion-refresher> must be used inside an <ion-content>');\r\n            return;\r\n        }\r\n        this.scrollEl = await contentEl.getScrollElement();\r\n        this.backgroundContentEl = contentEl.shadowRoot.querySelector('#background-content');\r\n        if (shouldUseNativeRefresher(this.el, getIonMode(this))) {\r\n            this.setupNativeRefresher(contentEl);\r\n        }\r\n        else {\r\n            this.gesture = (await import('./index-6f647ec8.js')).createGesture({\r\n                el: contentEl,\r\n                gestureName: 'refresher',\r\n                gesturePriority: 10,\r\n                direction: 'y',\r\n                threshold: 20,\r\n                passive: false,\r\n                canStart: () => this.canStart(),\r\n                onStart: () => this.onStart(),\r\n                onMove: ev => this.onMove(ev),\r\n                onEnd: () => this.onEnd(),\r\n            });\r\n            this.disabledChanged();\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        this.destroyNativeRefresher();\r\n        this.scrollEl = undefined;\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Call `complete()` when your async operation has completed.\r\n     * For example, the `refreshing` state is while the app is performing\r\n     * an asynchronous operation, such as receiving more data from an\r\n     * AJAX request. Once the data has been received, you then call this\r\n     * method to signify that the refreshing has completed and to close\r\n     * the refresher. This method also changes the refresher's state from\r\n     * `refreshing` to `completing`.\r\n     */\r\n    async complete() {\r\n        if (this.nativeRefresher) {\r\n            this.needsCompletion = true;\r\n            // Do not reset scroll el until user removes pointer from screen\r\n            if (!this.pointerDown) {\r\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 32 /* Completing */)));\r\n            }\r\n        }\r\n        else {\r\n            this.close(32 /* Completing */, '120ms');\r\n        }\r\n    }\r\n    /**\r\n     * Changes the refresher's state from `refreshing` to `cancelling`.\r\n     */\r\n    async cancel() {\r\n        if (this.nativeRefresher) {\r\n            // Do not reset scroll el until user removes pointer from screen\r\n            if (!this.pointerDown) {\r\n                raf(() => raf(() => this.resetNativeRefresher(this.elementToTransform, 16 /* Cancelling */)));\r\n            }\r\n        }\r\n        else {\r\n            this.close(16 /* Cancelling */, '');\r\n        }\r\n    }\r\n    /**\r\n     * A number representing how far down the user has pulled.\r\n     * The number `0` represents the user hasn't pulled down at all. The\r\n     * number `1`, and anything greater than `1`, represents that the user\r\n     * has pulled far enough down that when they let go then the refresh will\r\n     * happen. If they let go and the number is less than `1`, then the\r\n     * refresh will not happen, and the content will return to it's original\r\n     * position.\r\n     */\r\n    getProgress() {\r\n        return Promise.resolve(this.progress);\r\n    }\r\n    canStart() {\r\n        if (!this.scrollEl) {\r\n            return false;\r\n        }\r\n        if (this.state !== 1 /* Inactive */) {\r\n            return false;\r\n        }\r\n        // if the scrollTop is greater than zero then it's\r\n        // not possible to pull the content down yet\r\n        if (this.scrollEl.scrollTop > 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    onStart() {\r\n        this.progress = 0;\r\n        this.state = 1 /* Inactive */;\r\n    }\r\n    onMove(detail) {\r\n        if (!this.scrollEl) {\r\n            return;\r\n        }\r\n        // this method can get called like a bazillion times per second,\r\n        // so it's built to be as efficient as possible, and does its\r\n        // best to do any DOM read/writes only when absolutely necessary\r\n        // if multi-touch then get out immediately\r\n        const ev = detail.event;\r\n        if (ev.touches && ev.touches.length > 1) {\r\n            return;\r\n        }\r\n        // do nothing if it's actively refreshing\r\n        // or it's in the way of closing\r\n        // or this was never a startY\r\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\r\n            return;\r\n        }\r\n        const pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\r\n        const deltaY = detail.deltaY * pullFactor;\r\n        // don't bother if they're scrolling up\r\n        // and have not already started dragging\r\n        if (deltaY <= 0) {\r\n            // the current Y is higher than the starting Y\r\n            // so they scrolled up enough to be ignored\r\n            this.progress = 0;\r\n            this.state = 1 /* Inactive */;\r\n            if (this.appliedStyles) {\r\n                // reset the styles only if they were applied\r\n                this.setCss(0, '', false, '');\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n        if (this.state === 1 /* Inactive */) {\r\n            // this refresh is not already actively pulling down\r\n            // get the content's scrollTop\r\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\r\n            // if the scrollTop is greater than zero then it's\r\n            // not possible to pull the content down yet\r\n            if (scrollHostScrollTop > 0) {\r\n                this.progress = 0;\r\n                return;\r\n            }\r\n            // content scrolled all the way to the top, and dragging down\r\n            this.state = 2 /* Pulling */;\r\n        }\r\n        // prevent native scroll events\r\n        if (ev.cancelable) {\r\n            ev.preventDefault();\r\n        }\r\n        // the refresher is actively pulling at this point\r\n        // move the scroll element within the content element\r\n        this.setCss(deltaY, '0ms', true, '');\r\n        if (deltaY === 0) {\r\n            // don't continue if there's no delta yet\r\n            this.progress = 0;\r\n            return;\r\n        }\r\n        const pullMin = this.pullMin;\r\n        // set pull progress\r\n        this.progress = deltaY / pullMin;\r\n        // emit \"start\" if it hasn't started yet\r\n        if (!this.didStart) {\r\n            this.didStart = true;\r\n            this.ionStart.emit();\r\n        }\r\n        // emit \"pulling\" on every move\r\n        this.ionPull.emit();\r\n        // do nothing if the delta is less than the pull threshold\r\n        if (deltaY < pullMin) {\r\n            // ensure it stays in the pulling state, cuz its not ready yet\r\n            this.state = 2 /* Pulling */;\r\n            return;\r\n        }\r\n        if (deltaY > this.pullMax) {\r\n            // they pulled farther than the max, so kick off the refresh\r\n            this.beginRefresh();\r\n            return;\r\n        }\r\n        // pulled farther than the pull min!!\r\n        // it is now in the `ready` state!!\r\n        // if they let go then it'll refresh, kerpow!!\r\n        this.state = 4 /* Ready */;\r\n        return;\r\n    }\r\n    onEnd() {\r\n        // only run in a zone when absolutely necessary\r\n        if (this.state === 4 /* Ready */) {\r\n            // they pulled down far enough, so it's ready to refresh\r\n            this.beginRefresh();\r\n        }\r\n        else if (this.state === 2 /* Pulling */) {\r\n            // they were pulling down, but didn't pull down far enough\r\n            // set the content back to it's original location\r\n            // and close the refresher\r\n            // set that the refresh is actively cancelling\r\n            this.cancel();\r\n        }\r\n    }\r\n    beginRefresh() {\r\n        // assumes we're already back in a zone\r\n        // they pulled down far enough, so it's ready to refresh\r\n        this.state = 8 /* Refreshing */;\r\n        // place the content in a hangout position while it thinks\r\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\r\n        // emit \"refresh\" because it was pulled down far enough\r\n        // and they let go to begin refreshing\r\n        this.ionRefresh.emit({\r\n            complete: this.complete.bind(this)\r\n        });\r\n    }\r\n    close(state, delay) {\r\n        // create fallback timer incase something goes wrong with transitionEnd event\r\n        setTimeout(() => {\r\n            this.state = 1 /* Inactive */;\r\n            this.progress = 0;\r\n            this.didStart = false;\r\n            this.setCss(0, '0ms', false, '');\r\n        }, 600);\r\n        // reset set the styles on the scroll element\r\n        // set that the refresh is actively cancelling/completing\r\n        this.state = state;\r\n        this.setCss(0, this.closeDuration, true, delay);\r\n        // TODO: stop gesture\r\n    }\r\n    setCss(y, duration, overflowVisible, delay) {\r\n        if (this.nativeRefresher) {\r\n            return;\r\n        }\r\n        this.appliedStyles = (y > 0);\r\n        writeTask(() => {\r\n            if (this.scrollEl && this.backgroundContentEl) {\r\n                const scrollStyle = this.scrollEl.style;\r\n                const backgroundStyle = this.backgroundContentEl.style;\r\n                scrollStyle.transform = backgroundStyle.transform = ((y > 0) ? `translateY(${y}px) translateZ(0px)` : '');\r\n                scrollStyle.transitionDuration = backgroundStyle.transitionDuration = duration;\r\n                scrollStyle.transitionDelay = backgroundStyle.transitionDelay = delay;\r\n                scrollStyle.overflow = (overflowVisible ? 'hidden' : '');\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { slot: \"fixed\", class: {\r\n                [mode]: true,\r\n                // Used internally for styling\r\n                [`refresher-${mode}`]: true,\r\n                'refresher-native': this.nativeRefresher,\r\n                'refresher-active': this.state !== 1 /* Inactive */,\r\n                'refresher-pulling': this.state === 2 /* Pulling */,\r\n                'refresher-ready': this.state === 4 /* Ready */,\r\n                'refresher-refreshing': this.state === 8 /* Refreshing */,\r\n                'refresher-cancelling': this.state === 16 /* Cancelling */,\r\n                'refresher-completing': this.state === 32 /* Completing */,\r\n            } }));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n};\r\nRefresher.style = {\r\n    /*STENCIL:MODE:ios*/ ios: refresherIosCss,\r\n    /*STENCIL:MODE:md*/ md: refresherMdCss\r\n};\r\n\r\nconst RefresherContent = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    componentWillLoad() {\r\n        if (this.pullingIcon === undefined) {\r\n            const mode = getIonMode(this);\r\n            const overflowRefresher = this.el.style.webkitOverflowScrolling !== undefined ? 'lines' : 'arrow-down';\r\n            this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && isPlatform('mobile') ? config.get('spinner', overflowRefresher) : 'circular');\r\n        }\r\n        if (this.refreshingSpinner === undefined) {\r\n            const mode = getIonMode(this);\r\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\r\n        }\r\n    }\r\n    render() {\r\n        const pullingIcon = this.pullingIcon;\r\n        const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { class: mode }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner &&\r\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"div\", { class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' &&\r\n                h(\"div\", { class: \"arrow-container\" }, h(\"ion-icon\", { name: \"caret-back-sharp\" })))), this.pullingIcon && !hasSpinner &&\r\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\r\n            h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\r\n            h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\r\n            h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\r\n    }\r\n    get el() { return getElement(this); }\r\n};\r\n\r\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\r\n"],"sourceRoot":"webpack:///"}
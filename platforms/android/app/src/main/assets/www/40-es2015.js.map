{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6G;AACnC;AACtB;AACuH;AACjG;AACF;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yEAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,sBAAsB,OAAO,QAAQ,MAAM,SAAS,kBAAkB,0BAA0B,gBAAgB,UAAU;;AAE1H;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4DAAW;AACzC,gCAAgC,4DAAW;AAC3C,+BAA+B,4DAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mEAAU;AACnC,gCAAgC,2DAAM;AACtC;AACA;AACA;AACA;AACA;AACA,8BAA8B,2NAAkC;AAChE;AACA;AACA;AACA;AACA,YAAY,4DAAS,eAAe,oDAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0CAA0C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,gBAAgB,oBAAoB;AACtH;AACA;AACA;AACA;AACA;AACA,gFAAgF,gBAAgB,oCAAoC;AACplB,YAAY,8DAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd,QAAQ,8DAAM;AACd,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAM;AAClB,YAAY,8DAAM;AAClB;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAS,eAAe,oDAAoB;AAC5D,gBAAgB,4DAAS,eAAe,oDAAmB;AAC3D,gBAAgB,4DAAS,eAAe,oDAAqB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mEAAU;AAC/B;AACA;AACA,6CAA6C,mIAAmI,2DAAM,mEAAmE,2DAAM;AAC/P,uBAAuB;AACvB,eAAe,eAAe,SAAS,4DAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAM;AAClB;AACA;AACA;AACA,YAAY,8DAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA,QAAQ,8DAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAS,UAAU,oDAAqB;AACxD;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,GAAG,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mEAAuB;AACvD;AACA;AACA,gCAAgC,mEAAuB;AACvD;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC;AACjB;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA,+DAA+D,mBAAmB;AAClF;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,GAAG,wBAAwB;AACjD;AACA,cAAc,QAAQ,4DAAU,OAAO;AACvC;;AAEmD","file":"40-es2015.js","sourcesContent":["import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-26ec602c.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-1bf1fa84.js';\r\nimport { b as assert } from './helpers-d8b49b57.js';\r\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-e98418f5.js';\r\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\r\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\r\n\r\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\nclass ViewController {\r\n    constructor(component, params) {\r\n        this.component = component;\r\n        this.params = params;\r\n        this.state = VIEW_STATE_NEW;\r\n    }\r\n    async init(container) {\r\n        this.state = VIEW_STATE_ATTACHED;\r\n        if (!this.element) {\r\n            const component = this.component;\r\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    _destroy() {\r\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n        const element = this.element;\r\n        if (element) {\r\n            if (this.delegate) {\r\n                this.delegate.removeViewFromDom(element.parentElement, element);\r\n            }\r\n            else {\r\n                element.remove();\r\n            }\r\n        }\r\n        this.nav = undefined;\r\n        this.state = VIEW_STATE_DESTROYED;\r\n    }\r\n}\r\nconst matches = (view, id, params) => {\r\n    if (!view) {\r\n        return false;\r\n    }\r\n    if (view.component !== id) {\r\n        return false;\r\n    }\r\n    const currentParams = view.params;\r\n    if (currentParams === params) {\r\n        return true;\r\n    }\r\n    if (!currentParams && !params) {\r\n        return true;\r\n    }\r\n    if (!currentParams || !params) {\r\n        return false;\r\n    }\r\n    const keysA = Object.keys(currentParams);\r\n    const keysB = Object.keys(params);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n    // Test for A's keys different from B.\r\n    for (const key of keysA) {\r\n        if (currentParams[key] !== params[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nconst convertToView = (page, params) => {\r\n    if (!page) {\r\n        return null;\r\n    }\r\n    if (page instanceof ViewController) {\r\n        return page;\r\n    }\r\n    return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n    return pages.map(page => {\r\n        if (page instanceof ViewController) {\r\n            return page;\r\n        }\r\n        if ('page' in page) {\r\n            return convertToView(page.page, page.params);\r\n        }\r\n        return convertToView(page, undefined);\r\n    }).filter(v => v !== null);\r\n};\r\n\r\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\r\n\r\nconst Nav = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.transInstr = [];\r\n        this.animationEnabled = true;\r\n        this.useRouter = false;\r\n        this.isTransitioning = false;\r\n        this.destroyed = false;\r\n        this.views = [];\r\n        /**\r\n         * If `true`, the nav should animate the transition of components.\r\n         */\r\n        this.animated = true;\r\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\r\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\r\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\r\n    }\r\n    swipeGestureChanged() {\r\n        if (this.gesture) {\r\n            this.gesture.enable(this.swipeGesture === true);\r\n        }\r\n    }\r\n    rootChanged() {\r\n        if (this.root !== undefined) {\r\n            if (!this.useRouter) {\r\n                this.setRoot(this.root, this.rootParams);\r\n            }\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.useRouter =\r\n            !!document.querySelector('ion-router') &&\r\n                !this.el.closest('[no-router]');\r\n        if (this.swipeGesture === undefined) {\r\n            const mode = getIonMode(this);\r\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\r\n        }\r\n        this.ionNavWillLoad.emit();\r\n    }\r\n    async componentDidLoad() {\r\n        this.rootChanged();\r\n        this.gesture = (await import('./swipe-back-a7a3641e.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\r\n        this.swipeGestureChanged();\r\n    }\r\n    componentDidUnload() {\r\n        for (const view of this.views) {\r\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            view._destroy();\r\n        }\r\n        if (this.gesture) {\r\n            this.gesture.destroy();\r\n            this.gesture = undefined;\r\n        }\r\n        // release swipe back gesture and transition\r\n        this.transInstr.length = this.views.length = 0;\r\n        this.destroyed = true;\r\n    }\r\n    /**\r\n     * Push a new component onto the current navigation stack. Pass any additional\r\n     * information along as an object. This additional information is accessible\r\n     * through NavParams.\r\n     *\r\n     * @param component The component to push onto the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    push(component, componentProps, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: -1,\r\n            insertViews: [{ page: component, params: componentProps }],\r\n            opts\r\n        }, done);\r\n    }\r\n    /**\r\n     * Inserts a component into the navigation stack at the specified index.\r\n     * This is useful to add a component at any point in the navigation stack.\r\n     *\r\n     * @param insertIndex The index to insert the component at in the stack.\r\n     * @param component The component to insert into the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    insert(insertIndex, component, componentProps, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: insertIndex,\r\n            insertViews: [{ page: component, params: componentProps }],\r\n            opts\r\n        }, done);\r\n    }\r\n    /**\r\n     * Inserts an array of components into the navigation stack at the specified index.\r\n     * The last component in the array will become instantiated as a view, and animate\r\n     * in to become the active view.\r\n     *\r\n     * @param insertIndex The index to insert the components at in the stack.\r\n     * @param insertComponents The components to insert into the navigation stack.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    insertPages(insertIndex, insertComponents, opts, done) {\r\n        return this.queueTrns({\r\n            insertStart: insertIndex,\r\n            insertViews: insertComponents,\r\n            opts\r\n        }, done);\r\n    }\r\n    /**\r\n     * Pop a component off of the navigation stack. Navigates back from the current\r\n     * component.\r\n     *\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    pop(opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: -1,\r\n            removeCount: 1,\r\n            opts\r\n        }, done);\r\n    }\r\n    /**\r\n     * Pop to a specific index in the navigation stack.\r\n     *\r\n     * @param indexOrViewCtrl The index or view controller to pop to.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    popTo(indexOrViewCtrl, opts, done) {\r\n        const tiConfig = {\r\n            removeStart: -1,\r\n            removeCount: -1,\r\n            opts\r\n        };\r\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\r\n            tiConfig.removeView = indexOrViewCtrl;\r\n            tiConfig.removeStart = 1;\r\n        }\r\n        else if (typeof indexOrViewCtrl === 'number') {\r\n            tiConfig.removeStart = indexOrViewCtrl + 1;\r\n        }\r\n        return this.queueTrns(tiConfig, done);\r\n    }\r\n    /**\r\n     * Navigate back to the root of the stack, no matter how far back that is.\r\n     *\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    popToRoot(opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: 1,\r\n            removeCount: -1,\r\n            opts\r\n        }, done);\r\n    }\r\n    /**\r\n     * Removes a component from the navigation stack at the specified index.\r\n     *\r\n     * @param startIndex The number to begin removal at.\r\n     * @param removeCount The number of components to remove.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    removeIndex(startIndex, removeCount = 1, opts, done) {\r\n        return this.queueTrns({\r\n            removeStart: startIndex,\r\n            removeCount,\r\n            opts\r\n        }, done);\r\n    }\r\n    /**\r\n     * Set the root for the current navigation stack to a component.\r\n     *\r\n     * @param component The component to set as the root of the navigation stack.\r\n     * @param componentProps Any properties of the component.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    setRoot(component, componentProps, opts, done) {\r\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\r\n    }\r\n    /**\r\n     * Set the views of the current navigation stack and navigate to the last view.\r\n     * By default animations are disabled, but they can be enabled by passing options\r\n     * to the navigation controller. Navigation parameters can also be passed to the\r\n     * individual pages in the array.\r\n     *\r\n     * @param views The list of views to set as the navigation stack.\r\n     * @param opts The navigation options.\r\n     * @param done The transition complete function.\r\n     */\r\n    setPages(views, opts, done) {\r\n        if (opts == null) {\r\n            opts = {};\r\n        }\r\n        // if animation wasn't set to true then default it to NOT animate\r\n        if (opts.animated !== true) {\r\n            opts.animated = false;\r\n        }\r\n        return this.queueTrns({\r\n            insertStart: 0,\r\n            insertViews: views,\r\n            removeStart: 0,\r\n            removeCount: -1,\r\n            opts\r\n        }, done);\r\n    }\r\n    /** @internal */\r\n    setRouteId(id, params, direction) {\r\n        const active = this.getActiveSync();\r\n        if (matches(active, id, params)) {\r\n            return Promise.resolve({\r\n                changed: false,\r\n                element: active.element\r\n            });\r\n        }\r\n        let resolve;\r\n        const promise = new Promise(r => (resolve = r));\r\n        let finish;\r\n        const commonOpts = {\r\n            updateURL: false,\r\n            viewIsReady: enteringEl => {\r\n                let mark;\r\n                const p = new Promise(r => (mark = r));\r\n                resolve({\r\n                    changed: true,\r\n                    element: enteringEl,\r\n                    markVisible: async () => {\r\n                        mark();\r\n                        await finish;\r\n                    }\r\n                });\r\n                return p;\r\n            }\r\n        };\r\n        if (direction === 'root') {\r\n            finish = this.setRoot(id, params, commonOpts);\r\n        }\r\n        else {\r\n            const viewController = this.views.find(v => matches(v, id, params));\r\n            if (viewController) {\r\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\r\n            }\r\n            else if (direction === 'forward') {\r\n                finish = this.push(id, params, commonOpts);\r\n            }\r\n            else if (direction === 'back') {\r\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\r\n            }\r\n        }\r\n        return promise;\r\n    }\r\n    /** @internal */\r\n    async getRouteId() {\r\n        const active = this.getActiveSync();\r\n        return active\r\n            ? {\r\n                id: active.element.tagName,\r\n                params: active.params,\r\n                element: active.element\r\n            }\r\n            : undefined;\r\n    }\r\n    /**\r\n     * Get the active view.\r\n     */\r\n    getActive() {\r\n        return Promise.resolve(this.getActiveSync());\r\n    }\r\n    /**\r\n     * Get the view at the specified index.\r\n     *\r\n     * @param index The index of the view.\r\n     */\r\n    getByIndex(index) {\r\n        return Promise.resolve(this.views[index]);\r\n    }\r\n    /**\r\n     * Returns `true` if the current view can go back.\r\n     *\r\n     * @param view The view to check.\r\n     */\r\n    canGoBack(view) {\r\n        return Promise.resolve(this.canGoBackSync(view));\r\n    }\r\n    /**\r\n     * Get the previous view.\r\n     *\r\n     * @param view The view to get.\r\n     */\r\n    getPrevious(view) {\r\n        return Promise.resolve(this.getPreviousSync(view));\r\n    }\r\n    getLength() {\r\n        return this.views.length;\r\n    }\r\n    getActiveSync() {\r\n        return this.views[this.views.length - 1];\r\n    }\r\n    canGoBackSync(view = this.getActiveSync()) {\r\n        return !!(view && this.getPreviousSync(view));\r\n    }\r\n    getPreviousSync(view = this.getActiveSync()) {\r\n        if (!view) {\r\n            return undefined;\r\n        }\r\n        const views = this.views;\r\n        const index = views.indexOf(view);\r\n        return index > 0 ? views[index - 1] : undefined;\r\n    }\r\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\r\n    // 1. _nextTrns(): consumes the next transition in the queue\r\n    // 2. _viewInit(): initializes enteringView if required\r\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\r\n    // 4. _postViewInit(): add/remove the views from the navigation stack\r\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\r\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\r\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\r\n    // 8. _transitionFinish(): called once the transition finishes\r\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\r\n    queueTrns(ti, done) {\r\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\r\n            return Promise.resolve(false);\r\n        }\r\n        const promise = new Promise((resolve, reject) => {\r\n            ti.resolve = resolve;\r\n            ti.reject = reject;\r\n        });\r\n        ti.done = done;\r\n        // Normalize empty\r\n        if (ti.insertViews && ti.insertViews.length === 0) {\r\n            ti.insertViews = undefined;\r\n        }\r\n        // Enqueue transition instruction\r\n        this.transInstr.push(ti);\r\n        // if there isn't a transition already happening\r\n        // then this will kick off this transition\r\n        this.nextTrns();\r\n        return promise;\r\n    }\r\n    success(result, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        if (ti.done) {\r\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\r\n        }\r\n        ti.resolve(result.hasCompleted);\r\n        if (ti.opts.updateURL !== false && this.useRouter) {\r\n            const router = document.querySelector('ion-router');\r\n            if (router) {\r\n                const direction = result.direction === 'back' ? 'back' : 'forward';\r\n                router.navChanged(direction);\r\n            }\r\n        }\r\n    }\r\n    failed(rejectReason, ti) {\r\n        if (this.destroyed) {\r\n            this.fireError('nav controller was destroyed', ti);\r\n            return;\r\n        }\r\n        this.transInstr.length = 0;\r\n        this.fireError(rejectReason, ti);\r\n    }\r\n    fireError(rejectReason, ti) {\r\n        if (ti.done) {\r\n            ti.done(false, false, rejectReason);\r\n        }\r\n        if (ti.reject && !this.destroyed) {\r\n            ti.reject(rejectReason);\r\n        }\r\n        else {\r\n            ti.resolve(false);\r\n        }\r\n    }\r\n    nextTrns() {\r\n        // this is the framework's bread 'n butta function\r\n        // only one transition is allowed at any given time\r\n        if (this.isTransitioning) {\r\n            return false;\r\n        }\r\n        // there is no transition happening right now\r\n        // get the next instruction\r\n        const ti = this.transInstr.shift();\r\n        if (!ti) {\r\n            return false;\r\n        }\r\n        this.runTransition(ti);\r\n        return true;\r\n    }\r\n    async runTransition(ti) {\r\n        try {\r\n            // set that this nav is actively transitioning\r\n            this.ionNavWillChange.emit();\r\n            this.isTransitioning = true;\r\n            this.prepareTI(ti);\r\n            const leavingView = this.getActiveSync();\r\n            const enteringView = this.getEnteringView(ti, leavingView);\r\n            if (!leavingView && !enteringView) {\r\n                throw new Error('no views in the stack to be removed');\r\n            }\r\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\r\n                await enteringView.init(this.el);\r\n            }\r\n            this.postViewInit(enteringView, leavingView, ti);\r\n            // Needs transition?\r\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\r\n                enteringView !== leavingView;\r\n            const result = requiresTransition\r\n                ? await this.transition(enteringView, leavingView, ti)\r\n                : {\r\n                    // transition is not required, so we are already done!\r\n                    // they're inserting/removing the views somewhere in the middle or\r\n                    // beginning, so visually nothing needs to animate/transition\r\n                    // resolve immediately because there's no animation that's happening\r\n                    hasCompleted: true,\r\n                    requiresTransition: false\r\n                };\r\n            this.success(result, ti);\r\n            this.ionNavDidChange.emit();\r\n        }\r\n        catch (rejectReason) {\r\n            this.failed(rejectReason, ti);\r\n        }\r\n        this.isTransitioning = false;\r\n        this.nextTrns();\r\n    }\r\n    prepareTI(ti) {\r\n        const viewsLength = this.views.length;\r\n        ti.opts = ti.opts || {};\r\n        if (ti.opts.delegate === undefined) {\r\n            ti.opts.delegate = this.delegate;\r\n        }\r\n        if (ti.removeView !== undefined) {\r\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\r\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\r\n            const index = this.views.indexOf(ti.removeView);\r\n            if (index < 0) {\r\n                throw new Error('removeView was not found');\r\n            }\r\n            ti.removeStart += index;\r\n        }\r\n        if (ti.removeStart !== undefined) {\r\n            if (ti.removeStart < 0) {\r\n                ti.removeStart = viewsLength - 1;\r\n            }\r\n            if (ti.removeCount < 0) {\r\n                ti.removeCount = viewsLength - ti.removeStart;\r\n            }\r\n            ti.leavingRequiresTransition =\r\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\r\n        }\r\n        if (ti.insertViews) {\r\n            // allow -1 to be passed in to auto push it on the end\r\n            // and clean up the index if it's larger then the size of the stack\r\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\r\n                ti.insertStart = viewsLength;\r\n            }\r\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\r\n        }\r\n        const insertViews = ti.insertViews;\r\n        if (!insertViews) {\r\n            return;\r\n        }\r\n        assert(insertViews.length > 0, 'length can not be zero');\r\n        const viewControllers = convertToViews(insertViews);\r\n        if (viewControllers.length === 0) {\r\n            throw new Error('invalid views to insert');\r\n        }\r\n        // Check all the inserted view are correct\r\n        for (const view of viewControllers) {\r\n            view.delegate = ti.opts.delegate;\r\n            const nav = view.nav;\r\n            if (nav && nav !== this) {\r\n                throw new Error('inserted view was already inserted');\r\n            }\r\n            if (view.state === VIEW_STATE_DESTROYED) {\r\n                throw new Error('inserted view was already destroyed');\r\n            }\r\n        }\r\n        ti.insertViews = viewControllers;\r\n    }\r\n    getEnteringView(ti, leavingView) {\r\n        const insertViews = ti.insertViews;\r\n        if (insertViews !== undefined) {\r\n            // grab the very last view of the views to be inserted\r\n            // and initialize it as the new entering view\r\n            return insertViews[insertViews.length - 1];\r\n        }\r\n        const removeStart = ti.removeStart;\r\n        if (removeStart !== undefined) {\r\n            const views = this.views;\r\n            const removeEnd = removeStart + ti.removeCount;\r\n            for (let i = views.length - 1; i >= 0; i--) {\r\n                const view = views[i];\r\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\r\n                    return view;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    postViewInit(enteringView, leavingView, ti) {\r\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\r\n        assert(ti.resolve, 'resolve must be valid');\r\n        assert(ti.reject, 'reject must be valid');\r\n        const opts = ti.opts;\r\n        const insertViews = ti.insertViews;\r\n        const removeStart = ti.removeStart;\r\n        const removeCount = ti.removeCount;\r\n        let destroyQueue;\r\n        // there are views to remove\r\n        if (removeStart !== undefined && removeCount !== undefined) {\r\n            assert(removeStart >= 0, 'removeStart can not be negative');\r\n            assert(removeCount >= 0, 'removeCount can not be negative');\r\n            destroyQueue = [];\r\n            for (let i = 0; i < removeCount; i++) {\r\n                const view = this.views[i + removeStart];\r\n                if (view && view !== enteringView && view !== leavingView) {\r\n                    destroyQueue.push(view);\r\n                }\r\n            }\r\n            // default the direction to \"back\"\r\n            opts.direction = opts.direction || 'back';\r\n        }\r\n        const finalBalance = this.views.length +\r\n            (insertViews !== undefined ? insertViews.length : 0) -\r\n            (removeCount !== undefined ? removeCount : 0);\r\n        assert(finalBalance >= 0, 'final balance can not be negative');\r\n        if (finalBalance === 0) {\r\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\r\n            throw new Error('navigation stack needs at least one root page');\r\n        }\r\n        // At this point the transition can not be rejected, any throw should be an error\r\n        // there are views to insert\r\n        if (insertViews) {\r\n            // add the views to the\r\n            let insertIndex = ti.insertStart;\r\n            for (const view of insertViews) {\r\n                this.insertViewAt(view, insertIndex);\r\n                insertIndex++;\r\n            }\r\n            if (ti.enteringRequiresTransition) {\r\n                // default to forward if not already set\r\n                opts.direction = opts.direction || 'forward';\r\n            }\r\n        }\r\n        // if the views to be removed are in the beginning or middle\r\n        // and there is not a view that needs to visually transition out\r\n        // then just destroy them and don't transition anything\r\n        // batch all of lifecycles together\r\n        // let's make sure, callbacks are zoned\r\n        if (destroyQueue && destroyQueue.length > 0) {\r\n            for (const view of destroyQueue) {\r\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\r\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\r\n            }\r\n            // once all lifecycle events has been delivered, we can safely detroy the views\r\n            for (const view of destroyQueue) {\r\n                this.destroyView(view);\r\n            }\r\n        }\r\n    }\r\n    async transition(enteringView, leavingView, ti) {\r\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\r\n        // or if it is a portal (modal, actionsheet, etc.)\r\n        const opts = ti.opts;\r\n        const progressCallback = opts.progressAnimation\r\n            ? (ani) => this.sbAni = ani\r\n            : undefined;\r\n        const mode = getIonMode(this);\r\n        const enteringEl = enteringView.element;\r\n        const leavingEl = leavingView && leavingView.element;\r\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\r\n            leavingEl }, opts);\r\n        const { hasCompleted } = await transition(animationOpts);\r\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\r\n    }\r\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\r\n        const cleanupView = hasCompleted ? enteringView : leavingView;\r\n        if (cleanupView) {\r\n            this.cleanup(cleanupView);\r\n        }\r\n        return {\r\n            hasCompleted,\r\n            requiresTransition: true,\r\n            enteringView,\r\n            leavingView,\r\n            direction: opts.direction\r\n        };\r\n    }\r\n    insertViewAt(view, index) {\r\n        const views = this.views;\r\n        const existingIndex = views.indexOf(view);\r\n        if (existingIndex > -1) {\r\n            // this view is already in the stack!!\r\n            // move it to its new location\r\n            assert(view.nav === this, 'view is not part of the nav');\r\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\r\n        }\r\n        else {\r\n            assert(!view.nav, 'nav is used');\r\n            // this is a new view to add to the stack\r\n            // create the new entering view\r\n            view.nav = this;\r\n            // insert the entering view into the correct index in the stack\r\n            views.splice(index, 0, view);\r\n        }\r\n    }\r\n    removeView(view) {\r\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\r\n        const views = this.views;\r\n        const index = views.indexOf(view);\r\n        assert(index > -1, 'view must be part of the stack');\r\n        if (index >= 0) {\r\n            views.splice(index, 1);\r\n        }\r\n    }\r\n    destroyView(view) {\r\n        view._destroy();\r\n        this.removeView(view);\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    cleanup(activeView) {\r\n        // ok, cleanup time!! Destroy all of the views that are\r\n        // INACTIVE and come after the active view\r\n        // only do this if the views exist, though\r\n        if (this.destroyed) {\r\n            return;\r\n        }\r\n        const views = this.views;\r\n        const activeViewIndex = views.indexOf(activeView);\r\n        for (let i = views.length - 1; i >= 0; i--) {\r\n            const view = views[i];\r\n            const element = view.element;\r\n            if (i > activeViewIndex) {\r\n                // this view comes after the active view\r\n                // let's unload it\r\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\r\n                this.destroyView(view);\r\n            }\r\n            else if (i < activeViewIndex) {\r\n                // this view comes before the active view\r\n                // and it is not a portal then ensure it is hidden\r\n                setPageHidden(element, true);\r\n            }\r\n        }\r\n    }\r\n    canStart() {\r\n        return (!!this.swipeGesture &&\r\n            !this.isTransitioning &&\r\n            this.transInstr.length === 0 &&\r\n            this.animationEnabled &&\r\n            this.canGoBackSync());\r\n    }\r\n    onStart() {\r\n        this.queueTrns({\r\n            removeStart: -1,\r\n            removeCount: 1,\r\n            opts: {\r\n                direction: 'back',\r\n                progressAnimation: true\r\n            }\r\n        }, undefined);\r\n    }\r\n    onMove(stepValue) {\r\n        if (this.sbAni) {\r\n            this.sbAni.progressStep(stepValue);\r\n        }\r\n    }\r\n    onEnd(shouldComplete, stepValue, dur) {\r\n        if (this.sbAni) {\r\n            this.animationEnabled = false;\r\n            this.sbAni.onFinish(() => {\r\n                this.animationEnabled = true;\r\n            }, { oneTimeCallback: true });\r\n            // Account for rounding errors in JS\r\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\r\n            /**\r\n             * Animation will be reversed here, so need to\r\n             * reverse the easing curve as well\r\n             *\r\n             * Additionally, we need to account for the time relative\r\n             * to the new easing curve, as `stepValue` is going to be given\r\n             * in terms of a linear curve.\r\n             */\r\n            if (!shouldComplete) {\r\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\r\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\r\n            }\r\n            else {\r\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\r\n            }\r\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\r\n        }\r\n    }\r\n    render() {\r\n        return (h(\"slot\", null));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"swipeGesture\": [\"swipeGestureChanged\"],\r\n        \"root\": [\"rootChanged\"]\r\n    }; }\r\n};\r\nNav.style = navCss;\r\n\r\nconst navLink = (el, routerDirection, component, componentProps) => {\r\n    const nav = el.closest('ion-nav');\r\n    if (nav) {\r\n        if (routerDirection === 'forward') {\r\n            if (component !== undefined) {\r\n                return nav.push(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'root') {\r\n            if (component !== undefined) {\r\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'back') {\r\n            return nav.pop({ skipIfBusy: true });\r\n        }\r\n    }\r\n    return Promise.resolve(false);\r\n};\r\n\r\nconst NavLink = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * The transition direction when navigating to another page.\r\n         */\r\n        this.routerDirection = 'forward';\r\n        this.onClick = () => {\r\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\r\n        };\r\n    }\r\n    render() {\r\n        return (h(Host, { onClick: this.onClick }));\r\n    }\r\n    get el() { return getElement(this); }\r\n};\r\n\r\nexport { Nav as ion_nav, NavLink as ion_nav_link };\r\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6G;AAChD;AACP;AACsB;;AAE5E;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB,uCAAuC,4DAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB,sBAAsB,kCAAkC,eAAe;AACtH;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA,0CAA0C,4BAA4B,uCAAuC,0BAA0B;AACvI;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,aAAa;AACzE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,SAAS;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4DAAW;AAC7C,iCAAiC,4DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,8DAAQ;AACnE,uDAAuD,8DAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,cAAccAAc,QAAQ,4DAAU,OAAO;AACvC;;AAEA,6BAA6B,yBAAyB,0CAA0C,6BAA6B,mBAAmB,kBAAkB,4BAA4B,EAAE,oBAAoB,kBAAkB,mBAAmB,oBAAoB,uBAAuB,wBAAwB,oBAAoB,sBAAsB,uBAAuB,mBAAmB,oBAAoB,cAAc;;AAElb;AACA;AACA,QAAQ,4DAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4DAAO;AACnB;AACA;AACA;AACA,qBAAqB,mEAAU;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAC,CAAC,oDAAI,GAAG,6DAA6D,EAAE,4DAAkB,gBAAgB,wCAAwC,GAAG,EAAE,4DAAC,sBAAsB,UAAU,4DAAC;AACzM;AACA;AACA;;AAEwH","file":"54-es2015.js","sourcesContent":["import { r as registerInstance, d as createEvent, e as getElement, h, H as Host } from './index-26ec602c.js';\r\nimport { b as getIonMode } from './ionic-global-1bf1fa84.js';\r\nimport { e as debounce } from './helpers-d8b49b57.js';\r\nimport { o as openURL, c as createColorClasses } from './theme-c2dc54d9.js';\r\n\r\nconst Route = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * Relative path that needs to match in order for this route to apply.\r\n         *\r\n         * Accepts paths similar to expressjs so that you can define parameters\r\n         * in the url /foo/:bar where bar would be available in incoming props.\r\n         */\r\n        this.url = '';\r\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\r\n    }\r\n    onUpdate(newValue) {\r\n        this.ionRouteDataChanged.emit(newValue);\r\n    }\r\n    onComponentProps(newValue, oldValue) {\r\n        if (newValue === oldValue) {\r\n            return;\r\n        }\r\n        const keys1 = newValue ? Object.keys(newValue) : [];\r\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\r\n        if (keys1.length !== keys2.length) {\r\n            this.onUpdate(newValue);\r\n            return;\r\n        }\r\n        for (const key of keys1) {\r\n            if (newValue[key] !== oldValue[key]) {\r\n                this.onUpdate(newValue);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        this.ionRouteDataChanged.emit();\r\n    }\r\n    static get watchers() { return {\r\n        \"url\": [\"onUpdate\"],\r\n        \"component\": [\"onUpdate\"],\r\n        \"componentProps\": [\"onComponentProps\"]\r\n    }; }\r\n};\r\n\r\nconst RouteRedirect = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\r\n    }\r\n    propDidChange() {\r\n        this.ionRouteRedirectChanged.emit();\r\n    }\r\n    connectedCallback() {\r\n        this.ionRouteRedirectChanged.emit();\r\n    }\r\n    static get watchers() { return {\r\n        \"from\": [\"propDidChange\"],\r\n        \"to\": [\"propDidChange\"]\r\n    }; }\r\n};\r\n\r\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\r\n\r\nconst generatePath = (segments) => {\r\n    const path = segments\r\n        .filter(s => s.length > 0)\r\n        .join('/');\r\n    return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n    const path = [];\r\n    for (const route of chain) {\r\n        for (const segment of route.path) {\r\n            if (segment[0] === ':') {\r\n                const param = route.params && route.params[segment.slice(1)];\r\n                if (!param) {\r\n                    return null;\r\n                }\r\n                path.push(param);\r\n            }\r\n            else if (segment !== '') {\r\n                path.push(segment);\r\n            }\r\n        }\r\n    }\r\n    return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\r\n    let url = generatePath([\r\n        ...parsePath(root),\r\n        ...path\r\n    ]);\r\n    if (useHash) {\r\n        url = '#' + url;\r\n    }\r\n    if (queryString !== undefined) {\r\n        url = url + '?' + queryString;\r\n    }\r\n    if (direction === ROUTER_INTENT_FORWARD) {\r\n        history.pushState(state, '', url);\r\n    }\r\n    else {\r\n        history.replaceState(state, '', url);\r\n    }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n    if (prefix.length > path.length) {\r\n        return null;\r\n    }\r\n    if (prefix.length <= 1 && prefix[0] === '') {\r\n        return path;\r\n    }\r\n    for (let i = 0; i < prefix.length; i++) {\r\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n            return null;\r\n        }\r\n    }\r\n    if (path.length === prefix.length) {\r\n        return [''];\r\n    }\r\n    return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n    let pathname = loc.pathname;\r\n    if (useHash) {\r\n        const hash = loc.hash;\r\n        pathname = (hash[0] === '#')\r\n            ? hash.slice(1)\r\n            : '';\r\n    }\r\n    const prefix = parsePath(root);\r\n    const path = parsePath(pathname);\r\n    return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n    if (path == null) {\r\n        return [''];\r\n    }\r\n    const removeQueryString = path.split('?')[0];\r\n    const segments = removeQueryString.split('/')\r\n        .map(s => s.trim())\r\n        .filter(s => s.length > 0);\r\n    if (segments.length === 0) {\r\n        return [''];\r\n    }\r\n    else {\r\n        return segments;\r\n    }\r\n};\r\n\r\nconst printRoutes = (routes) => {\r\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n    for (const chain of routes) {\r\n        const path = [];\r\n        chain.forEach(r => path.push(...r.path));\r\n        const ids = chain.map(r => r.id);\r\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n    }\r\n    console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n    for (const redirect of redirects) {\r\n        if (redirect.to) {\r\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n        }\r\n    }\r\n    console.groupEnd();\r\n};\r\n\r\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\r\n    try {\r\n        // find next navigation outlet in the DOM\r\n        const outlet = searchNavNode(root);\r\n        // make sure we can continue interacting the DOM, otherwise abort\r\n        if (index >= chain.length || !outlet) {\r\n            return changed;\r\n        }\r\n        await outlet.componentOnReady();\r\n        const route = chain[index];\r\n        const result = await outlet.setRouteId(route.id, route.params, direction);\r\n        // if the outlet changed the page, reset navigation to neutral (no direction)\r\n        // this means nested outlets will not animate\r\n        if (result.changed) {\r\n            direction = ROUTER_INTENT_NONE;\r\n            changed = true;\r\n        }\r\n        // recursively set nested outlets\r\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\r\n        // once all nested outlets are visible let's make the parent visible too,\r\n        // using markVisible prevents flickering\r\n        if (result.markVisible) {\r\n            await result.markVisible();\r\n        }\r\n        return changed;\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        return false;\r\n    }\r\n};\r\nconst readNavState = async (root) => {\r\n    const ids = [];\r\n    let outlet;\r\n    let node = root;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n        outlet = searchNavNode(node);\r\n        if (outlet) {\r\n            const id = await outlet.getRouteId();\r\n            if (id) {\r\n                node = id.element;\r\n                id.element = undefined;\r\n                ids.push(id);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n    if (searchNavNode(document.body)) {\r\n        return Promise.resolve();\r\n    }\r\n    return new Promise(resolve => {\r\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n    });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n    if (!root) {\r\n        return undefined;\r\n    }\r\n    if (root.matches(QUERY)) {\r\n        return root;\r\n    }\r\n    const outlet = root.querySelector(QUERY);\r\n    return outlet ? outlet : undefined;\r\n};\r\n\r\nconst matchesRedirect = (input, route) => {\r\n    const { from, to } = route;\r\n    if (to === undefined) {\r\n        return false;\r\n    }\r\n    if (from.length > input.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < from.length; i++) {\r\n        const expected = from[i];\r\n        if (expected === '*') {\r\n            return true;\r\n        }\r\n        if (expected !== input[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n    return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n    const len = Math.min(ids.length, chain.length);\r\n    let i = 0;\r\n    for (; i < len; i++) {\r\n        if (ids[i].toLowerCase() !== chain[i].id) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n    const segments = new RouterSegments(inputPath);\r\n    let matchesDefault = false;\r\n    let allparams;\r\n    for (let i = 0; i < chain.length; i++) {\r\n        const path = chain[i].path;\r\n        if (path[0] === '') {\r\n            matchesDefault = true;\r\n        }\r\n        else {\r\n            for (const segment of path) {\r\n                const data = segments.next();\r\n                // data param\r\n                if (segment[0] === ':') {\r\n                    if (data === '') {\r\n                        return null;\r\n                    }\r\n                    allparams = allparams || [];\r\n                    const params = allparams[i] || (allparams[i] = {});\r\n                    params[segment.slice(1)] = data;\r\n                }\r\n                else if (data !== segment) {\r\n                    return null;\r\n                }\r\n            }\r\n            matchesDefault = false;\r\n        }\r\n    }\r\n    const matches = (matchesDefault)\r\n        ? matchesDefault === (segments.next() === '')\r\n        : true;\r\n    if (!matches) {\r\n        return null;\r\n    }\r\n    if (allparams) {\r\n        return chain.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, allparams[i])\r\n        }));\r\n    }\r\n    return chain;\r\n};\r\nconst mergeParams = (a, b) => {\r\n    if (!a && b) {\r\n        return b;\r\n    }\r\n    else if (a && !b) {\r\n        return a;\r\n    }\r\n    else if (a && b) {\r\n        return Object.assign(Object.assign({}, a), b);\r\n    }\r\n    return undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n    let match = null;\r\n    let maxMatches = 0;\r\n    const plainIDs = ids.map(i => i.id);\r\n    for (const chain of chains) {\r\n        const score = matchesIDs(plainIDs, chain);\r\n        if (score > maxMatches) {\r\n            match = chain;\r\n            maxMatches = score;\r\n        }\r\n    }\r\n    if (match) {\r\n        return match.map((route, i) => ({\r\n            id: route.id,\r\n            path: route.path,\r\n            params: mergeParams(route.params, ids[i] && ids[i].params)\r\n        }));\r\n    }\r\n    return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n    let match = null;\r\n    let matches = 0;\r\n    for (const chain of chains) {\r\n        const matchedChain = matchesPath(path, chain);\r\n        if (matchedChain !== null) {\r\n            const score = computePriority(matchedChain);\r\n            if (score > matches) {\r\n                matches = score;\r\n                match = matchedChain;\r\n            }\r\n        }\r\n    }\r\n    return match;\r\n};\r\nconst computePriority = (chain) => {\r\n    let score = 1;\r\n    let level = 1;\r\n    for (const route of chain) {\r\n        for (const path of route.path) {\r\n            if (path[0] === ':') {\r\n                score += Math.pow(1, level);\r\n            }\r\n            else if (path !== '') {\r\n                score += Math.pow(2, level);\r\n            }\r\n            level++;\r\n        }\r\n    }\r\n    return score;\r\n};\r\nclass RouterSegments {\r\n    constructor(path) {\r\n        this.path = path.slice();\r\n    }\r\n    next() {\r\n        if (this.path.length > 0) {\r\n            return this.path.shift();\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nconst readRedirects = (root) => {\r\n    return Array.from(root.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n        .map(el => {\r\n        const to = readProp(el, 'to');\r\n        return {\r\n            from: parsePath(readProp(el, 'from')),\r\n            to: to == null ? undefined : parsePath(to),\r\n        };\r\n    });\r\n};\r\nconst readRoutes = (root) => {\r\n    return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n    return Array.from(node.children)\r\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n        .map(el => {\r\n        const component = readProp(el, 'component');\r\n        if (component == null) {\r\n            throw new Error('component missing in ion-route');\r\n        }\r\n        return {\r\n            path: parsePath(readProp(el, 'url')),\r\n            id: component.toLowerCase(),\r\n            params: el.componentProps,\r\n            children: readRouteNodes(root, el)\r\n        };\r\n    });\r\n};\r\nconst readProp = (el, prop) => {\r\n    if (prop in el) {\r\n        return el[prop];\r\n    }\r\n    if (el.hasAttribute(prop)) {\r\n        return el.getAttribute(prop);\r\n    }\r\n    return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n    const routes = [];\r\n    for (const node of nodes) {\r\n        flattenNode([], routes, node);\r\n    }\r\n    return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n    const s = chain.slice();\r\n    s.push({\r\n        id: node.id,\r\n        path: node.path,\r\n        params: node.params\r\n    });\r\n    if (node.children.length === 0) {\r\n        routes.push(s);\r\n        return;\r\n    }\r\n    for (const sub of node.children) {\r\n        flattenNode(s, routes, sub);\r\n    }\r\n};\r\n\r\nconst Router = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.previousPath = null;\r\n        this.busy = false;\r\n        this.state = 0;\r\n        this.lastState = 0;\r\n        /**\r\n         * By default `ion-router` will match the routes at the root path (\"/\").\r\n         * That can be changed when\r\n         *\r\n         */\r\n        this.root = '/';\r\n        /**\r\n         * The router can work in two \"modes\":\r\n         * - With hash: `/index.html#/path/to/page`\r\n         * - Without hash: `/path/to/page`\r\n         *\r\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\r\n         *\r\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\r\n         * requires additional server-side configuration in order to properly work.\r\n         *\r\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\r\n         *\r\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\r\n         */\r\n        this.useHash = true;\r\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\r\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\r\n    }\r\n    async componentWillLoad() {\r\n        console.debug('[ion-router] router will load');\r\n        await waitUntilNavNode();\r\n        console.debug('[ion-router] found nav');\r\n        await this.onRoutesChanged();\r\n    }\r\n    componentDidLoad() {\r\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\r\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\r\n    }\r\n    onPopState() {\r\n        const direction = this.historyDirection();\r\n        const path = this.getPath();\r\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\r\n        return this.writeNavStateRoot(path, direction);\r\n    }\r\n    onBackButton(ev) {\r\n        ev.detail.register(0, processNextHandler => {\r\n            this.back();\r\n            processNextHandler();\r\n        });\r\n    }\r\n    /**\r\n     * Navigate to the specified URL.\r\n     *\r\n     * @param url The url to navigate to.\r\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\r\n     */\r\n    push(url, direction = 'forward') {\r\n        if (url.startsWith('.')) {\r\n            url = (new URL(url, window.location.href)).pathname;\r\n        }\r\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\r\n        const path = parsePath(url);\r\n        const queryString = url.split('?')[1];\r\n        this.setPath(path, direction, queryString);\r\n        return this.writeNavStateRoot(path, direction);\r\n    }\r\n    /**\r\n     * Go back to previous page in the window.history.\r\n     */\r\n    back() {\r\n        window.history.back();\r\n        return Promise.resolve(this.waitPromise);\r\n    }\r\n    /** @internal */\r\n    async printDebug() {\r\n        console.debug('CURRENT PATH', this.getPath());\r\n        console.debug('PREVIOUS PATH', this.previousPath);\r\n        printRoutes(readRoutes(this.el));\r\n        printRedirects(readRedirects(this.el));\r\n    }\r\n    /** @internal */\r\n    async navChanged(direction) {\r\n        if (this.busy) {\r\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\r\n            return false;\r\n        }\r\n        const { ids, outlet } = await readNavState(window.document.body);\r\n        const routes = readRoutes(this.el);\r\n        const chain = routerIDsToChain(ids, routes);\r\n        if (!chain) {\r\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\r\n            return false;\r\n        }\r\n        const path = chainToPath(chain);\r\n        if (!path) {\r\n            console.warn('[ion-router] router could not match path because some required param is missing');\r\n            return false;\r\n        }\r\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\r\n        this.setPath(path, direction);\r\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\r\n        return true;\r\n    }\r\n    onRedirectChanged() {\r\n        const path = this.getPath();\r\n        if (path && routeRedirect(path, readRedirects(this.el))) {\r\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\r\n        }\r\n    }\r\n    onRoutesChanged() {\r\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\r\n    }\r\n    historyDirection() {\r\n        const win = window;\r\n        if (win.history.state === null) {\r\n            this.state++;\r\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\r\n        }\r\n        const state = win.history.state;\r\n        const lastState = this.lastState;\r\n        this.lastState = state;\r\n        if (state > lastState) {\r\n            return ROUTER_INTENT_FORWARD;\r\n        }\r\n        else if (state < lastState) {\r\n            return ROUTER_INTENT_BACK;\r\n        }\r\n        else {\r\n            return ROUTER_INTENT_NONE;\r\n        }\r\n    }\r\n    async writeNavStateRoot(path, direction) {\r\n        if (!path) {\r\n            console.error('[ion-router] URL is not part of the routing set');\r\n            return false;\r\n        }\r\n        // lookup redirect rule\r\n        const redirects = readRedirects(this.el);\r\n        const redirect = routeRedirect(path, redirects);\r\n        let redirectFrom = null;\r\n        if (redirect) {\r\n            this.setPath(redirect.to, direction);\r\n            redirectFrom = redirect.from;\r\n            path = redirect.to;\r\n        }\r\n        // lookup route chain\r\n        const routes = readRoutes(this.el);\r\n        const chain = routerPathToChain(path, routes);\r\n        if (!chain) {\r\n            console.error('[ion-router] the path does not match any route');\r\n            return false;\r\n        }\r\n        // write DOM give\r\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\r\n    }\r\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\r\n        const unlock = await this.lock();\r\n        let changed = false;\r\n        try {\r\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        unlock();\r\n        return changed;\r\n    }\r\n    async lock() {\r\n        const p = this.waitPromise;\r\n        let resolve;\r\n        this.waitPromise = new Promise(r => resolve = r);\r\n        if (p !== undefined) {\r\n            await p;\r\n        }\r\n        return resolve;\r\n    }\r\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\r\n        if (this.busy) {\r\n            console.warn('[ion-router] router is busy, transition was cancelled');\r\n            return false;\r\n        }\r\n        this.busy = true;\r\n        // generate route event and emit will change\r\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\r\n        if (routeEvent) {\r\n            this.ionRouteWillChange.emit(routeEvent);\r\n        }\r\n        const changed = await writeNavState(node, chain, direction, index);\r\n        this.busy = false;\r\n        if (changed) {\r\n            console.debug('[ion-router] route changed', path);\r\n        }\r\n        // emit did change\r\n        if (routeEvent) {\r\n            this.ionRouteDidChange.emit(routeEvent);\r\n        }\r\n        return changed;\r\n    }\r\n    setPath(path, direction, queryString) {\r\n        this.state++;\r\n        writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\r\n    }\r\n    getPath() {\r\n        return readPath(window.location, this.root, this.useHash);\r\n    }\r\n    routeChangeEvent(path, redirectFromPath) {\r\n        const from = this.previousPath;\r\n        const to = generatePath(path);\r\n        this.previousPath = to;\r\n        if (to === from) {\r\n            return null;\r\n        }\r\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\r\n        return {\r\n            from,\r\n            redirectedFrom,\r\n            to,\r\n        };\r\n    }\r\n    get el() { return getElement(this); }\r\n};\r\n\r\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\r\n\r\nconst RouterLink = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        /**\r\n         * When using a router, it specifies the transition direction when navigating to\r\n         * another page using `href`.\r\n         */\r\n        this.routerDirection = 'forward';\r\n        this.onClick = (ev) => {\r\n            openURL(this.href, ev, this.routerDirection);\r\n        };\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        const attrs = {\r\n            href: this.href,\r\n            rel: this.rel,\r\n            target: this.target\r\n        };\r\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\r\n    }\r\n};\r\nRouterLink.style = routerLinkCss;\r\n\r\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\r\n"],"sourceRoot":"webpack:///"}